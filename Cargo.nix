
# This file was @generated by crate2nix 0.11.0-rc.4 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "typstfmt";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "typstfmt" = rec {
      packageId = "typstfmt";
      build = internal.buildRustCrateWithFeatures {
        packageId = "typstfmt";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "adler" = rec {
        crateName = "adler";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1zim79cvzd5yrkzl3nyfx0avijwgk9fqv3yrscdy1cc79ih02qpj";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "1.1.2";
        edition = "2021";
        sha256 = "1w510wnixvlgimkx1zjbvlxh6xps2vjgfqgwf5a6adlbjp5rv5mj";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf-literal" ];
          "logging" = [ "dep:log" ];
          "perf-literal" = [ "dep:memchr" ];
          "std" = [ "memchr?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "perf-literal" "std" ];
      };
      "anstream" = rec {
        crateName = "anstream";
        version = "0.6.4";
        edition = "2021";
        sha256 = "0i2a9390vwhc42c5njz38n56jfwg17v64nqw9232j9gb2sz1xf9a";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "anstyle-parse";
            packageId = "anstyle-parse";
          }
          {
            name = "anstyle-query";
            packageId = "anstyle-query";
            optional = true;
          }
          {
            name = "anstyle-wincon";
            packageId = "anstyle-wincon";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "colorchoice";
            packageId = "colorchoice";
            optional = true;
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
          }
        ];
        features = {
          "auto" = [ "dep:anstyle-query" "dep:colorchoice" ];
          "default" = [ "auto" "wincon" ];
          "wincon" = [ "dep:anstyle-wincon" ];
        };
        resolvedDefaultFeatures = [ "auto" "default" "wincon" ];
      };
      "anstyle" = rec {
        crateName = "anstyle";
        version = "1.0.4";
        edition = "2021";
        sha256 = "11yxw02b6parn29s757z96rgiqbn8qy0fk9a3p3bhczm85dhfybh";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "anstyle-parse" = rec {
        crateName = "anstyle-parse";
        version = "0.2.2";
        edition = "2021";
        sha256 = "0h11is6a9pv027yw26ijrqhzrps5kyk3k58xzyk5x3w6q64rlyri";
        dependencies = [
          {
            name = "utf8parse";
            packageId = "utf8parse";
            optional = true;
          }
        ];
        features = {
          "core" = [ "dep:arrayvec" ];
          "default" = [ "utf8" ];
          "utf8" = [ "dep:utf8parse" ];
        };
        resolvedDefaultFeatures = [ "default" "utf8" ];
      };
      "anstyle-query" = rec {
        crateName = "anstyle-query";
        version = "1.0.0";
        edition = "2021";
        sha256 = "0js9bgpqz21g0p2nm350cba1d0zfyixsma9lhyycic5sw55iv8aw";
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anstyle-wincon" = rec {
        crateName = "anstyle-wincon";
        version = "3.0.1";
        edition = "2021";
        sha256 = "0a066gr4p7bha8qwnxyrpbrqzjdvk8l7pdg7isljimpls889ssgh";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.75";
        edition = "2018";
        sha256 = "1rmcjkim91c5mw7h9wn8nv0k6x118yz0xg0z1q18svgn42mqqrm4";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "approx" = rec {
        crateName = "approx";
        version = "0.5.1";
        edition = "2015";
        sha256 = "1ilpv3dgd58rasslss0labarq7jawxmivk17wsh8wmkdm3q15cfa";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num-complex" = [ "dep:num-complex" ];
        };
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.7";
        edition = "2015";
        sha256 = "0ia5ndyxqkzdymqr4ls53jdmajf09adjimg5kvw65kkprg930jbb";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];

      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.7.4";
        edition = "2018";
        sha256 = "04b7n722jij0v3fnm3qk072d5ysc2q30rl9fz33zpfhzah30mlwn";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1ylp3cb47ylzabimazvbz9ms6ap784zhb6syaz6c1jqpmcmq0s6l";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "az" = rec {
        crateName = "az";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0ww9k1w3al7x5qmb7f13v3s9c2pg1pdxbs8xshqy6zyrchj4qzkv";
        features = {
        };
      };
      "base64" = rec {
        crateName = "base64";
        version = "0.21.5";
        edition = "2018";
        sha256 = "1y8x2xs9nszj5ix7gg4ycn5a6wy7ca74zxwqri3bdqzdjha6lqrm";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "biblatex" = rec {
        crateName = "biblatex";
        version = "0.9.3";
        edition = "2021";
        sha256 = "1f5py80y8aj3yibsd9gcffvg0i1zg32f35akig6jf0hd0j2p5zi7";
        authors = [
          "Martin Haug <mhaug@live.de>"
        ];
        dependencies = [
          {
            name = "numerals";
            packageId = "numerals";
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "strum";
            packageId = "strum";
            features = [ "derive" ];
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
          {
            name = "unscanny";
            packageId = "unscanny";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "bincode" = rec {
        crateName = "bincode";
        version = "1.3.3";
        edition = "2015";
        sha256 = "1bfw3mnwzx5g1465kiqllp5n4r10qrqy88kdlp3jfwnq2ya5xx5i";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
          "Francesco Mazzoli <f@mazzo.li>"
          "David Tolnay <dtolnay@gmail.com>"
          "Zoey Riordan <zoey@dos.cafe>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
        };
      };
      "bit-set" = rec {
        crateName = "bit-set";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1wcm9vxi00ma4rcxkl3pzzjli6ihrpn9cfdi0c5b4cvga2mxs007";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        dependencies = [
          {
            name = "bit-vec";
            packageId = "bit-vec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "bit-vec/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bit-vec" = rec {
        crateName = "bit-vec";
        version = "0.6.3";
        edition = "2015";
        sha256 = "1ywqjnv60cdh1slhz67psnp422md6jdliji6alq0gmly2xm9p7rl";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "bitflags 1.3.2" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitflags 2.4.1" = rec {
        crateName = "bitflags";
        version = "2.4.1";
        edition = "2021";
        sha256 = "01ryy3kd671b0ll4bhdvhsz67vwz1lz53fz504injrd7wpv64xrj";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "bstr 0.2.17" = rec {
        crateName = "bstr";
        version = "0.2.17";
        edition = "2018";
        sha256 = "08rjbhysy6gg27db2h3pnhvr2mlr5vkj797i9625kwg8hgrnjdds";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.1.10";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "unicode" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "regex-automata" = [ "dep:regex-automata" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "std" "serde1-nostd" "serde/std" ];
          "serde1-nostd" = [ "serde" ];
          "std" = [ "memchr/std" ];
          "unicode" = [ "lazy_static" "regex-automata" ];
        };
        resolvedDefaultFeatures = [ "lazy_static" "regex-automata" "unicode" ];
      };
      "bstr 1.7.0" = rec {
        crateName = "bstr";
        version = "1.7.0";
        edition = "2021";
        sha256 = "06gh43qpgdqfsfpykw9y4708y0qclajwc2bbsymkv3yk5pxxg6n7";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "memchr/alloc" "serde?/alloc" ];
          "default" = [ "std" "unicode" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "memchr/std" "serde?/std" ];
          "unicode" = [ "dep:regex-automata" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "bytemuck" = rec {
        crateName = "bytemuck";
        version = "1.14.0";
        edition = "2018";
        sha256 = "1ik1ma5n3bg700skkzhx50zjk7kj7mbsphi773if17l04pn2hk9p";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        features = {
          "bytemuck_derive" = [ "dep:bytemuck_derive" ];
          "derive" = [ "bytemuck_derive" ];
          "extern_crate_std" = [ "extern_crate_alloc" ];
        };
        resolvedDefaultFeatures = [ "extern_crate_alloc" ];
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.83";
        edition = "2018";
        crateBin = [];
        sha256 = "1l643zidlb5iy1dskc5ggqs4wqa29a02f44piczqc8zcnsq4y5zi";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
        ];
        features = {
          "jobserver" = [ "dep:jobserver" ];
          "parallel" = [ "jobserver" ];
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "chinese-number" = rec {
        crateName = "chinese-number";
        version = "0.7.7";
        edition = "2021";
        sha256 = "0v5va8drix8gs2kv6pmv5yzdxhlpzrwkp3ch86kxdxj6cgpwmz29";
        authors = [
          "Magic Len <len@magiclen.org>"
        ];
        dependencies = [
          {
            name = "chinese-variant";
            packageId = "chinese-variant";
          }
          {
            name = "enum-ordinalize";
            packageId = "enum-ordinalize";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "chinese-to-number" = [ "num-traits" ];
          "default" = [ "std" "number-to-chinese" "chinese-to-number" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "num-traits" = [ "dep:num-traits" ];
          "number-to-chinese" = [ "num-bigint" "num-traits" ];
        };
        resolvedDefaultFeatures = [ "num-bigint" "num-traits" "number-to-chinese" ];
      };
      "chinese-variant" = rec {
        crateName = "chinese-variant";
        version = "1.1.3";
        edition = "2021";
        sha256 = "12s91vg2m9wfs9b3f0q2alj9am08y7r2prb0szg3fwjh8m8lg23m";
        authors = [
          "Magic Len <len@magiclen.org>"
        ];
        features = {
          "enum-ordinalize" = [ "dep:enum-ordinalize" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ciborium" = rec {
        crateName = "ciborium";
        version = "0.2.2";
        edition = "2021";
        sha256 = "03hgfw4674im1pdqblcp77m7rc8x2v828si5570ga5q9dzyrzrj2";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        dependencies = [
          {
            name = "ciborium-io";
            packageId = "ciborium-io";
            features = [ "alloc" ];
          }
          {
            name = "ciborium-ll";
            packageId = "ciborium-ll";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "ciborium-io/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ciborium-io" = rec {
        crateName = "ciborium-io";
        version = "0.2.2";
        edition = "2021";
        sha256 = "0my7s5g24hvp1rs1zd1cxapz94inrvqpdf1rslrvxj8618gfmbq5";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "ciborium-ll" = rec {
        crateName = "ciborium-ll";
        version = "0.2.2";
        edition = "2021";
        sha256 = "1n8g4j5rwkfs3rzfi6g1p7ngmz6m5yxsksryzf5k72ll7mjknrjp";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        dependencies = [
          {
            name = "ciborium-io";
            packageId = "ciborium-io";
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "alloc" "half/std" ];
        };
      };
      "citationberg" = rec {
        crateName = "citationberg";
        version = "0.3.1";
        edition = "2021";
        sha256 = "02rx28ar1yqzfh97n18ihd1bmgshvgyj07aq36hhbylgsygzwnfj";
        authors = [
          "Martin Haug <mhaug@live.de>"
        ];
        dependencies = [
          {
            name = "quick-xml";
            packageId = "quick-xml 0.31.0";
            features = [ "serialize" "overlapped-lists" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "json" = [ "unscanny" ];
          "unscanny" = [ "dep:unscanny" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "clap" = rec {
        crateName = "clap";
        version = "4.4.7";
        edition = "2021";
        crateBin = [];
        sha256 = "0yzilqlyf5xid5i7qvk8sqpnbggsqk2ndbfmclsci67cvh05wjdc";
        dependencies = [
          {
            name = "clap_builder";
            packageId = "clap_builder";
            usesDefaultFeatures = false;
          }
          {
            name = "clap_derive";
            packageId = "clap_derive";
            optional = true;
          }
        ];
        features = {
          "cargo" = [ "clap_builder/cargo" ];
          "color" = [ "clap_builder/color" ];
          "debug" = [ "clap_builder/debug" "clap_derive?/debug" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "deprecated" = [ "clap_builder/deprecated" "clap_derive?/deprecated" ];
          "derive" = [ "dep:clap_derive" ];
          "env" = [ "clap_builder/env" ];
          "error-context" = [ "clap_builder/error-context" ];
          "help" = [ "clap_builder/help" ];
          "std" = [ "clap_builder/std" ];
          "string" = [ "clap_builder/string" ];
          "suggestions" = [ "clap_builder/suggestions" ];
          "unicode" = [ "clap_builder/unicode" ];
          "unstable-doc" = [ "clap_builder/unstable-doc" "derive" ];
          "unstable-styles" = [ "clap_builder/unstable-styles" ];
          "unstable-v5" = [ "clap_builder/unstable-v5" "clap_derive?/unstable-v5" "deprecated" ];
          "usage" = [ "clap_builder/usage" ];
          "wrap_help" = [ "clap_builder/wrap_help" ];
        };
        resolvedDefaultFeatures = [ "color" "default" "derive" "error-context" "help" "std" "suggestions" "usage" ];
      };
      "clap_builder" = rec {
        crateName = "clap_builder";
        version = "4.4.7";
        edition = "2021";
        sha256 = "0qvnxjf6csr5v00zpd8yxabf6cna0nfx402x2wkwmrk25aixjzn7";
        dependencies = [
          {
            name = "anstream";
            packageId = "anstream";
            optional = true;
          }
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "clap_lex";
            packageId = "clap_lex";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
        ];
        features = {
          "color" = [ "dep:anstream" ];
          "debug" = [ "dep:backtrace" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "std" = [ "anstyle/std" ];
          "suggestions" = [ "dep:strsim" "error-context" ];
          "unicode" = [ "dep:unicode-width" "dep:unicase" ];
          "unstable-doc" = [ "cargo" "wrap_help" "env" "unicode" "string" ];
          "unstable-styles" = [ "color" ];
          "unstable-v5" = [ "deprecated" ];
          "wrap_help" = [ "help" "dep:terminal_size" ];
        };
        resolvedDefaultFeatures = [ "color" "error-context" "help" "std" "suggestions" "usage" ];
      };
      "clap_derive" = rec {
        crateName = "clap_derive";
        version = "4.4.7";
        edition = "2021";
        sha256 = "0hk4hcxl56qwqsf4hmf7c0gr19r9fbxk0ah2bgkr36pmmaph966g";
        procMacro = true;
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        features = {
          "raw-deprecated" = [ "deprecated" ];
          "unstable-v5" = [ "deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "clap_lex" = rec {
        crateName = "clap_lex";
        version = "0.6.0";
        edition = "2021";
        sha256 = "1l8bragdvim7mva9flvd159dskn2bdkpl0jqrr41wnjfn8pcfbvh";

      };
      "cobs" = rec {
        crateName = "cobs";
        version = "0.2.3";
        edition = "2018";
        sha256 = "05gd16mws4yd63h8jr3p08in8y8w21rpjp5jb55hzl9bgalh5fk7";
        authors = [
          "Allen Welkie <>"
          "James Munns <james.munns@ferrous-systems.com>"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "color_quant" = rec {
        crateName = "color_quant";
        version = "1.1.0";
        edition = "2015";
        sha256 = "12q1n427h2bbmmm1mnglr57jaz2dj9apk0plcxw7nwqiai7qjyrx";
        authors = [
          "nwin <nwin@users.noreply.github.com>"
        ];

      };
      "colorchoice" = rec {
        crateName = "colorchoice";
        version = "1.0.0";
        edition = "2021";
        sha256 = "1ix7w85kwvyybwi2jdkl3yva2r2bvdcc3ka2grjfzfgrapqimgxc";

      };
      "comemo" = rec {
        crateName = "comemo";
        version = "0.4.0";
        edition = "2021";
        sha256 = "14bsiayib4lhz3jrbf1fqh2fpwsm6cii90mifym3jhvji901csfz";
        authors = [
          "Laurenz <laurmaedje@gmail.com>"
        ];
        dependencies = [
          {
            name = "comemo-macros";
            packageId = "comemo-macros";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "siphasher";
            packageId = "siphasher 1.0.1";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "comemo-macros" = rec {
        crateName = "comemo-macros";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1nr8w81hkzg49s515v61shxb077iq6d6001pybxbvxdlz516x4y8";
        procMacro = true;
        authors = [
          "Laurenz <laurmaedje@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];

      };
      "console" = rec {
        crateName = "console";
        version = "0.15.7";
        edition = "2018";
        sha256 = "1y6cbwadid5g4fyn4xq9c0s7mfavqqfg6prs9p3gvphfqw6f09n9";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "encode_unicode";
            packageId = "encode_unicode";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" "Win32_Storage_FileSystem" "Win32_UI_Input_KeyboardAndMouse" ];
          }
        ];
        features = {
          "default" = [ "unicode-width" "ansi-parsing" ];
          "unicode-width" = [ "dep:unicode-width" ];
          "windows-console-colors" = [ "ansi-parsing" ];
        };
      };
      "core_maths" = rec {
        crateName = "core_maths";
        version = "0.1.0";
        edition = "2015";
        sha256 = "18q9fwy80lk1lccam375skmsslryik00zkhsl850pidqrh2jbc73";
        authors = [
          "Robert Bastian <me@robertbastian.dev"
        ];
        dependencies = [
          {
            name = "libm";
            packageId = "libm";
          }
        ];

      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.3.2";
        edition = "2015";
        sha256 = "03c8f29yx293yf43xar946xbls1g60c207m9drf8ilqhr25vsh5m";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.8.5";
        edition = "2021";
        sha256 = "03bp38ljx4wj6vvy4fbhx41q8f585zyqix6pncz1mkz93z08qgv1";
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "crossbeam-epoch/std" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.9.18";
        edition = "2021";
        sha256 = "03j2np8llwf376m3fxqx859mgp9f83hj1w34153c7a9c7i5ar0jv";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "loom-crate" "crossbeam-utils/loom" ];
          "loom-crate" = [ "dep:loom-crate" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [ "alloc" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.20";
        edition = "2021";
        sha256 = "100fksq5mm1n7zj242cclkw6yf7a4a8ix3lvpfkhxvdhbda9kv12";
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crunchy" = rec {
        crateName = "crunchy";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1dx9mypwd5mpfbbajm78xcrg5lirqk7934ik980mmaffg3hdm0bs";
        authors = [
          "Vurich <jackefransham@hotmail.co.uk>"
        ];
        features = {
          "default" = [ "limit_128" ];
        };
        resolvedDefaultFeatures = [ "default" "limit_128" ];
      };
      "csv" = rec {
        crateName = "csv";
        version = "1.3.0";
        edition = "2021";
        sha256 = "1zjrlycvn44fxd9m8nwy8x33r9ncgk0k3wvy4fnvb9rpsks4ymxc";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "csv-core";
            packageId = "csv-core";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "csv-core" = rec {
        crateName = "csv-core";
        version = "0.1.11";
        edition = "2018";
        sha256 = "0w7s7qa60xb054rqddpyg53xq2b29sf3rbhcl8sbdx02g4yjpyjy";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "libc" = [ "memchr/libc" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "data-url" = rec {
        crateName = "data-url";
        version = "0.3.0";
        edition = "2018";
        sha256 = "17r8qh9kapw53m37g5bwjabryazls7mnpwspw01d1yrgnv8ikcs1";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "deranged" = rec {
        crateName = "deranged";
        version = "0.3.9";
        edition = "2021";
        sha256 = "1lqzxgxqa1jdsvh4r7fbckpxvvfr8b819vwzdzd2f166494x0chg";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        dependencies = [
          {
            name = "powerfmt";
            packageId = "powerfmt";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num" = [ "dep:num-traits" ];
          "powerfmt" = [ "dep:powerfmt" ];
          "quickcheck" = [ "dep:quickcheck" "alloc" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "powerfmt" "std" ];
      };
      "displaydoc" = rec {
        crateName = "displaydoc";
        version = "0.2.4";
        edition = "2018";
        sha256 = "0p8pyg10csc782qlwx3znr6qx46ni96m1qh597kmyrf6s3s8axa8";
        procMacro = true;
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "downcast-rs" = rec {
        crateName = "downcast-rs";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0l36kgxqd5djhqwf5abxjmgasdw8n0qsjvw3jdvhi91nj393ba4y";
        authors = [
          "Ashish Myles <marcianx@gmail.com>"
          "Runji Wang <wangrunji0408@163.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "ecow" = rec {
        crateName = "ecow";
        version = "0.2.0";
        edition = "2021";
        sha256 = "00if0126540hlakir3p9655m8pbq55d8s6lxv8qn8wnskhzmxsp6";
        authors = [
          "Laurenz <laurmaedje@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.9.0";
        edition = "2018";
        sha256 = "01qy3anr7jal5lpc20791vxrw0nl6vksb5j7x56q2fycgcyy8sm2";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "use_std" ];
      };
      "embedded-io" = rec {
        crateName = "embedded-io";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1v9wrc5nsgaaady7i3ya394sik5251j0iq5rls7mrx7fv696h6pg";
        features = {
          "defmt" = [ "dep:defmt" ];
          "futures" = [ "std" "async" "dep:futures" ];
          "log" = [ "dep:log" ];
          "std" = [ "alloc" "futures?/std" ];
          "tokio" = [ "std" "async" "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "encode_unicode" = rec {
        crateName = "encode_unicode";
        version = "0.3.6";
        edition = "2015";
        sha256 = "07w3vzrhxh9lpjgsg2y5bwzfar2aq35mdznvcp3zjl0ssj7d4mx3";
        authors = [
          "Torbjørn Birch Moltu <t.b.moltu@lyse.net>"
        ];
        features = {
          "ascii" = [ "dep:ascii" ];
          "clippy" = [ "dep:clippy" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "enum-ordinalize" = rec {
        crateName = "enum-ordinalize";
        version = "4.3.0";
        edition = "2021";
        sha256 = "1max64z9giii61qcwl56rndd7pakaylkaij5zqbbbvjl9vxdr87y";
        dependencies = [
          {
            name = "enum-ordinalize-derive";
            packageId = "enum-ordinalize-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "derive" "traits" ];
          "derive" = [ "dep:enum-ordinalize-derive" ];
          "traits" = [ "enum-ordinalize-derive?/traits" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "traits" ];
      };
      "enum-ordinalize-derive" = rec {
        crateName = "enum-ordinalize-derive";
        version = "4.3.1";
        edition = "2021";
        sha256 = "1zy53fabazimwv5cl0366k834ybixzl84lxj9mfavbnlfn532a0d";
        procMacro = true;
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "traits" ];
      };
      "env_logger" = rec {
        crateName = "env_logger";
        version = "0.10.0";
        edition = "2021";
        sha256 = "1w797qgkrmqdacsbc0j6yvpnmvfc9lx6k8fm79rndkxci5mapkc5";
        dependencies = [
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "is-terminal";
            packageId = "is-terminal";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "perf" ];
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "auto-color" = [ "dep:is-terminal" "color" ];
          "color" = [ "dep:termcolor" ];
          "default" = [ "auto-color" "humantime" "regex" ];
          "humantime" = [ "dep:humantime" ];
          "regex" = [ "dep:regex" ];
        };
        resolvedDefaultFeatures = [ "auto-color" "color" "default" "humantime" "regex" ];
      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1malmx5f4lkfvqasz319lq6gb3ddg19yzf9s8cykfsgzdmyq0hsl";

      };
      "errno" = rec {
        crateName = "errno";
        version = "0.3.5";
        edition = "2018";
        sha256 = "0q78awjy3pr36xacgc0x1v57ha6ljmmiza7a74mf759gdbv16gmc";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("hermit" == target."os");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "libc/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "fancy-regex" = rec {
        crateName = "fancy-regex";
        version = "0.11.0";
        edition = "2018";
        sha256 = "18j0mmzfycibhxhhhfja00dxd1vf8x5c28lbry224574h037qpxr";
        authors = [
          "Raph Levien <raph@google.com>"
          "Robin Stocker <robin@nibor.org>"
        ];
        dependencies = [
          {
            name = "bit-set";
            packageId = "bit-set";
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "default" = [ "unicode" "perf" ];
          "perf" = [ "regex/perf" ];
          "perf-cache" = [ "regex/perf-cache" ];
          "perf-dfa" = [ "regex/perf-dfa" ];
          "perf-inline" = [ "regex/perf-inline" ];
          "perf-literal" = [ "regex/perf-literal" ];
          "unicode" = [ "regex/unicode" ];
        };
        resolvedDefaultFeatures = [ "default" "perf" "unicode" ];
      };
      "fast-srgb8" = rec {
        crateName = "fast-srgb8";
        version = "1.0.0";
        edition = "2018";
        sha256 = "18g6xwwh4gnkyx1352hnvwagpv0n4y98yp2llm8vyvwxh487abnx";
        authors = [
          "Thom Chiovoloni <chiovolonit@gmail.com>"
        ];

      };
      "fdeflate" = rec {
        crateName = "fdeflate";
        version = "0.3.0";
        edition = "2021";
        sha256 = "045fyccqx0wbfrh36sgcf79za5qg95vpihmbklj0dvhlqpmbsafk";
        authors = [
          "The image-rs Developers"
        ];
        dependencies = [
          {
            name = "simd-adler32";
            packageId = "simd-adler32";
          }
        ];

      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.0.28";
        edition = "2018";
        sha256 = "03llhsh4gqdirnfxxb9g2w9n0721dyn4yjir3pz7z4vjaxb3yc26";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "with-alloc" ];
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch") && (!("emscripten" == target."os")));
            features = [ "with-alloc" ];
          }
        ];
        features = {
          "any_zlib" = [ "any_impl" ];
          "cloudflare-zlib-sys" = [ "dep:cloudflare-zlib-sys" ];
          "cloudflare_zlib" = [ "any_zlib" "cloudflare-zlib-sys" ];
          "default" = [ "rust_backend" ];
          "libz-ng-sys" = [ "dep:libz-ng-sys" ];
          "libz-sys" = [ "dep:libz-sys" ];
          "miniz-sys" = [ "rust_backend" ];
          "miniz_oxide" = [ "dep:miniz_oxide" ];
          "rust_backend" = [ "miniz_oxide" "any_impl" ];
          "zlib" = [ "any_zlib" "libz-sys" ];
          "zlib-default" = [ "any_zlib" "libz-sys/default" ];
          "zlib-ng" = [ "any_zlib" "libz-ng-sys" ];
          "zlib-ng-compat" = [ "zlib" "libz-sys/zlib-ng" ];
        };
        resolvedDefaultFeatures = [ "any_impl" "default" "miniz_oxide" "rust_backend" ];
      };
      "float-cmp" = rec {
        crateName = "float-cmp";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1i799ksbq7fj9rm9m82g1yqgm6xi3jnrmylddmqknmksajylpplq";
        libName = "float_cmp";
        authors = [
          "Mike Dilger <mike@mikedilger.com>"
        ];
        features = {
          "default" = [ "ratio" ];
          "num-traits" = [ "dep:num-traits" ];
          "ratio" = [ "num-traits" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "fontdb" = rec {
        crateName = "fontdb";
        version = "0.16.2";
        edition = "2018";
        sha256 = "1hqxv3jnh06s4bflrwnb39mi3knllfs4mxm44vsn0gzgqch90adh";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "slotmap";
            packageId = "slotmap";
            usesDefaultFeatures = false;
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" ];
          }
          {
            name = "ttf-parser";
            packageId = "ttf-parser";
            usesDefaultFeatures = false;
            features = [ "opentype-layout" "apple-layout" "variable-fonts" "glyph-names" ];
          }
        ];
        features = {
          "default" = [ "std" "fs" "memmap" "fontconfig" ];
          "fontconfig" = [ "fontconfig-parser" "fs" ];
          "fontconfig-parser" = [ "dep:fontconfig-parser" ];
          "fs" = [ "std" ];
          "memmap" = [ "fs" "memmap2" ];
          "memmap2" = [ "dep:memmap2" ];
          "std" = [ "ttf-parser/std" ];
        };
      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0milh8x7nl4f450s3ddhg57a3flcv6yq8hlkyk6fyr3mcb128dp1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "percent-encoding/alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" "percent-encoding/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "gif" = rec {
        crateName = "gif";
        version = "0.12.0";
        edition = "2018";
        sha256 = "0ibhjyrslfv9qm400gp4hd50v9ibva01j4ab9bwiq1aycy9jayc0";
        authors = [
          "The image-rs Developers"
        ];
        dependencies = [
          {
            name = "color_quant";
            packageId = "color_quant";
            optional = true;
          }
          {
            name = "weezl";
            packageId = "weezl";
          }
        ];
        features = {
          "color_quant" = [ "dep:color_quant" ];
          "default" = [ "raii_no_panic" "std" "color_quant" ];
        };
        resolvedDefaultFeatures = [ "color_quant" "default" "raii_no_panic" "std" ];
      };
      "globmatch" = rec {
        crateName = "globmatch";
        version = "0.2.5";
        edition = "2021";
        sha256 = "1809rjlpyq8g55fvz7knzcy0klzfw4cffpw5afzjnaycg5ihfm9p";
        authors = [
          "Martin Lampacher <lmapii@gmail.com>"
        ];
        dependencies = [
          {
            name = "globset";
            packageId = "globset";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];

      };
      "globset" = rec {
        crateName = "globset";
        version = "0.4.13";
        edition = "2018";
        sha256 = "0gf1l67k78l946wdc8mj219ar86dcyi0cb0raxdm4mbww70rg73m";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
          }
          {
            name = "bstr";
            packageId = "bstr 1.7.0";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "perf" "std" ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "log" ];
      };
      "half" = rec {
        crateName = "half";
        version = "2.4.1";
        edition = "2021";
        sha256 = "123q4zzw1x4309961i69igzd1wb7pj04aaii3kwasrz3599qrl3d";
        authors = [
          "Kathryn Long <squeeself@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crunchy";
            packageId = "crunchy";
            target = { target, features }: ("spirv" == target."arch");
          }
        ];
        devDependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "num-traits" = [ "dep:num-traits" ];
          "rand_distr" = [ "dep:rand" "dep:rand_distr" ];
          "rkyv" = [ "dep:rkyv" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zerocopy" = [ "dep:zerocopy" ];
        };
      };
      "hashbrown 0.12.3" = rec {
        crateName = "hashbrown";
        version = "0.12.3";
        edition = "2021";
        sha256 = "1268ka4750pyg2pbgsr43f0289l5zah4arir2k4igx5a8c6fg7la";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "raw" ];
      };
      "hashbrown 0.14.2" = rec {
        crateName = "hashbrown";
        version = "0.14.2";
        edition = "2021";
        sha256 = "0mj1x1d16acxf4zg7wr7q2x8pgzfi1bzpifygcsxmg4d2n972gpr";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" "allocator-api2" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "allocator-api2?/nightly" "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rkyv" = [ "dep:rkyv" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "raw" ];
      };
      "hayagriva" = rec {
        crateName = "hayagriva";
        version = "0.5.3";
        edition = "2021";
        crateBin = [];
        sha256 = "0yn9j48hj491swwvpbw4xszaprp2acb2lsw76zknrf3pig4j038x";
        authors = [
          "Martin Haug <mhaug@live.de>"
        ];
        dependencies = [
          {
            name = "biblatex";
            packageId = "biblatex";
            optional = true;
          }
          {
            name = "ciborium";
            packageId = "ciborium";
            optional = true;
          }
          {
            name = "citationberg";
            packageId = "citationberg";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.0.2";
            features = [ "serde" ];
          }
          {
            name = "numerals";
            packageId = "numerals";
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
            features = [ "serde" ];
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
          {
            name = "unscanny";
            packageId = "unscanny";
          }
          {
            name = "url";
            packageId = "url";
            features = [ "serde" ];
          }
        ];
        features = {
          "archive" = [ "ciborium" ];
          "biblatex" = [ "dep:biblatex" ];
          "ciborium" = [ "dep:ciborium" ];
          "clap" = [ "dep:clap" ];
          "cli" = [ "clap" "strum" ];
          "csl-json" = [ "citationberg/json" ];
          "default" = [ "biblatex" "archive" ];
          "strum" = [ "dep:strum" ];
        };
        resolvedDefaultFeatures = [ "archive" "biblatex" "ciborium" "default" ];
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1a7mqsnycv5z4z5vnv1k34548jzmc0ajic7c1j8jsaspnhw5ql4m";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        features = {
          "unicode" = [ "unicode-segmentation" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.3.3";
        edition = "2021";
        sha256 = "1dyc8qsjh876n74a3rcz8h43s27nj1sypdhsn2ms61bd3b47wzyp";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "humantime" = rec {
        crateName = "humantime";
        version = "2.1.0";
        edition = "2018";
        sha256 = "1r55pfkkf5v0ji1x6izrjwdq9v6sc7bv99xj6srywcar37xmnfls";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
        ];

      };
      "hypher" = rec {
        crateName = "hypher";
        version = "0.1.5";
        edition = "2021";
        sha256 = "0ra2kxbpi033jy42wkr7m7rgg6yhy69xad0hmc0z43936xbas91v";
        authors = [
          "Laurenz <laurmaedje@gmail.com>"
        ];
        features = {
          "default" = [ "alloc" "full" ];
          "full" = [ "afrikaans" "albanian" "belarusian" "bulgarian" "catalan" "croatian" "czech" "danish" "dutch" "english" "estonian" "finnish" "french" "georgian" "german" "greek" "hungarian" "icelandic" "italian" "kurmanji" "latin" "lithuanian" "mongolian" "norwegian" "polish" "portuguese" "russian" "serbian" "slovak" "slovenian" "spanish" "swedish" "turkish" "turkmen" "ukrainian" ];
        };
        resolvedDefaultFeatures = [ "afrikaans" "albanian" "alloc" "belarusian" "bulgarian" "catalan" "croatian" "czech" "danish" "default" "dutch" "english" "estonian" "finnish" "french" "full" "georgian" "german" "greek" "hungarian" "icelandic" "italian" "kurmanji" "latin" "lithuanian" "mongolian" "norwegian" "polish" "portuguese" "russian" "serbian" "slovak" "slovenian" "spanish" "swedish" "turkish" "turkmen" "ukrainian" ];
      };
      "icu_collections" = rec {
        crateName = "icu_collections";
        version = "1.4.0";
        edition = "2021";
        sha256 = "0q4cqwwdm2xhwl6knmwr4qsr3chan779xag86za491gw78srcz8k";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" "yoke" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "databake" = [ "dep:databake" "zerovec/databake" ];
          "serde" = [ "dep:serde" "zerovec/serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "icu_locid" = rec {
        crateName = "icu_locid";
        version = "1.4.0";
        edition = "2021";
        sha256 = "179apv94a2jakllzkzgh6bw8xvbm5d8ra7jj59zc056wd99s42jw";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "litemap";
            packageId = "litemap";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bench" = [ "serde" ];
          "databake" = [ "dep:databake" ];
          "serde" = [ "dep:serde" "tinystr/serde" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "zerovec" ];
      };
      "icu_locid_transform" = rec {
        crateName = "icu_locid_transform";
        version = "1.4.0";
        edition = "2021";
        sha256 = "0nj3dxgv4724f0lpyvax5cwbcbhk18gxf78hf52cmz94cn7pvhap";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locid";
            packageId = "icu_locid";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "icu_locid_transform_data";
            packageId = "icu_locid_transform_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
            features = [ "alloc" "zerovec" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "yoke" ];
          }
        ];
        features = {
          "bench" = [ "serde" ];
          "compiled_data" = [ "dep:icu_locid_transform_data" ];
          "datagen" = [ "serde" "dep:databake" "zerovec/databake" "icu_locid/databake" "tinystr/databake" ];
          "default" = [ "compiled_data" ];
          "serde" = [ "dep:serde" "icu_locid/serde" "tinystr/serde" "zerovec/serde" "icu_provider/serde" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "icu_locid_transform_data" = rec {
        crateName = "icu_locid_transform_data";
        version = "1.4.0";
        edition = "2021";
        sha256 = "1p6k8xgziw94fyf7i1wp6npnm0hlxkwyd3gfmwnhwn7ricz6qp2l";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "icu_properties" = rec {
        crateName = "icu_properties";
        version = "1.4.1";
        edition = "2021";
        sha256 = "0scy0apg9vvr5cb1wyzwmy4yqrqkh0i11ki9p1qzbzfqi4cl129s";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locid_transform";
            packageId = "icu_locid_transform";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "compiled_data" ];
          }
          {
            name = "icu_properties_data";
            packageId = "icu_properties_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
            features = [ "alloc" "zerovec" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "bidi" = [ "dep:unicode-bidi" ];
          "compiled_data" = [ "dep:icu_properties_data" "dep:icu_locid_transform" ];
          "datagen" = [ "serde" "dep:databake" "zerovec/databake" "icu_collections/databake" "tinystr/databake" ];
          "default" = [ "compiled_data" ];
          "serde" = [ "dep:serde" "tinystr/serde" "zerovec/serde" "icu_collections/serde" "icu_provider/serde" ];
          "std" = [ "icu_collections/std" "icu_provider/std" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" "default" "serde" ];
      };
      "icu_properties_data" = rec {
        crateName = "icu_properties_data";
        version = "1.4.1";
        edition = "2021";
        sha256 = "05aql7jwck60zsqlfdvai08c3bq7pk8iv6zf427zzm2xxr8qn2p7";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "icu_provider" = rec {
        crateName = "icu_provider";
        version = "1.4.0";
        edition = "2021";
        sha256 = "1x628yy398rh1m4wvwn1lpjd9xc3kxqi3gxb8w19bdky521ffn5s";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locid";
            packageId = "icu_locid";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider_macros";
            packageId = "icu_provider_macros";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "postcard";
            packageId = "postcard";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "datagen" = [ "serde" "dep:erased-serde" "dep:databake" "std" "sync" ];
          "deserialize_bincode_1" = [ "serde" "dep:bincode" "std" ];
          "deserialize_json" = [ "serde" "dep:serde_json" ];
          "deserialize_postcard_1" = [ "serde" "dep:postcard" ];
          "log_error_context" = [ "logging" ];
          "logging" = [ "dep:log" ];
          "macros" = [ "dep:icu_provider_macros" ];
          "serde" = [ "dep:serde" "yoke/serde" ];
          "std" = [ "icu_locid/std" ];
        };
        resolvedDefaultFeatures = [ "deserialize_postcard_1" "macros" "serde" "sync" ];
      };
      "icu_provider_adapters" = rec {
        crateName = "icu_provider_adapters";
        version = "1.4.0";
        edition = "2021";
        sha256 = "1pd425vzklzxa1gfa3sph1k972b5673pvjv8pfmc79qd4rwgjad2";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "icu_locid";
            packageId = "icu_locid";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "icu_locid_transform";
            packageId = "icu_locid_transform";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "yoke" ];
          }
        ];
        features = {
          "databake" = [ "dep:databake" ];
          "datagen" = [ "std" "serde" "icu_provider/datagen" ];
          "serde" = [ "dep:serde" "zerovec/serde" "icu_locid/serde" "icu_locid_transform/serde" "icu_provider/serde" ];
          "std" = [ "icu_locid/std" "icu_provider/std" ];
        };
      };
      "icu_provider_blob" = rec {
        crateName = "icu_provider_blob";
        version = "1.4.0";
        edition = "2021";
        sha256 = "009nlysn2gqhg7x34vapraqirc79b6cp2lk3ghbdnwm6vp6h4wja";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
            features = [ "deserialize_postcard_1" "serde" ];
          }
          {
            name = "postcard";
            packageId = "postcard";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "zerotrie";
            packageId = "zerotrie";
            usesDefaultFeatures = false;
            features = [ "serde" "zerovec" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "serde" "yoke" ];
          }
        ];
        features = {
          "export" = [ "icu_provider/datagen" "log" "postcard/alloc" "std" "zerovec/serde" "zerotrie/alloc" "zerotrie/litemap" ];
          "log" = [ "dep:log" ];
          "std" = [ "icu_provider/std" ];
        };
      };
      "icu_provider_macros" = rec {
        crateName = "icu_provider_macros";
        version = "1.4.0";
        edition = "2021";
        sha256 = "06ng7n06q8dsc1na88wgxj40rjh0wscmi70imwvq67jmc8xdvayj";
        procMacro = true;
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" "parsing" ];
          }
        ];

      };
      "icu_segmenter" = rec {
        crateName = "icu_segmenter";
        version = "1.4.0";
        edition = "2021";
        sha256 = "13rg18khl34shlxgn6amc3b5bwkhhp0ca2kpar4nlfm39f7ixp5j";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "core_maths";
            packageId = "core_maths";
            optional = true;
          }
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locid";
            packageId = "icu_locid";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
          {
            name = "icu_segmenter_data";
            packageId = "icu_segmenter_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "utf8_iter";
            packageId = "utf8_iter";
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "yoke" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "auto" = [ "lstm" ];
          "compiled_data" = [ "dep:icu_segmenter_data" ];
          "datagen" = [ "serde" "dep:databake" "zerovec/databake" "icu_collections/databake" ];
          "default" = [ "compiled_data" "auto" ];
          "icu_locid_transform" = [ "dep:icu_locid_transform" ];
          "lstm" = [ "dep:core_maths" ];
          "serde" = [ "dep:serde" "zerovec/serde" "icu_collections/serde" "icu_provider/serde" ];
          "std" = [ "icu_collections/std" "icu_locid/std" "icu_provider/std" ];
        };
        resolvedDefaultFeatures = [ "auto" "compiled_data" "default" "lstm" "serde" ];
      };
      "icu_segmenter_data" = rec {
        crateName = "icu_segmenter_data";
        version = "1.4.0";
        edition = "2021";
        sha256 = "0imb6m1g9jxjibapy4ynsmiwdwn324ydmicgzs6f1z6gimlxcwrn";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "idna" = rec {
        crateName = "idna";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1xhjrcjqq0l5bpzvdgylvpkgk94panxgsirzhjnnqfdgc4a9nkb3";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
            usesDefaultFeatures = false;
            features = [ "hardcoded-data" ];
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" "unicode-bidi/std" "unicode-normalization/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "if_chain" = rec {
        crateName = "if_chain";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1vdrylnqw8vd99j20jgalh1vp1vh7dwnkdzsmlx4yjsvfsmf2mnb";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
        ];

      };
      "image" = rec {
        crateName = "image";
        version = "0.24.7";
        edition = "2018";
        sha256 = "04d7f25b8nlszfv9a474n4a0al4m2sv9gqj3yiphhqr0syyzsgbg";
        authors = [
          "The image-rs Developers"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "extern_crate_alloc" ];
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "color_quant";
            packageId = "color_quant";
          }
          {
            name = "gif";
            packageId = "gif";
            optional = true;
          }
          {
            name = "jpeg-decoder";
            packageId = "jpeg-decoder";
            rename = "jpeg";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-rational";
            packageId = "num-rational";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "png";
            packageId = "png";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "jpeg-decoder";
            packageId = "jpeg-decoder";
            rename = "jpeg";
            usesDefaultFeatures = false;
            features = [ "platform_independent" ];
          }
        ];
        features = {
          "avif" = [ "avif-encoder" ];
          "avif-decoder" = [ "mp4parse" "dcv-color-primitives" "dav1d" ];
          "avif-encoder" = [ "ravif" "rgb" ];
          "dav1d" = [ "dep:dav1d" ];
          "dcv-color-primitives" = [ "dep:dcv-color-primitives" ];
          "dds" = [ "dxt" ];
          "default" = [ "gif" "jpeg" "ico" "png" "pnm" "tga" "tiff" "webp" "bmp" "hdr" "dxt" "dds" "farbfeld" "jpeg_rayon" "openexr" "qoi" ];
          "exr" = [ "dep:exr" ];
          "gif" = [ "dep:gif" ];
          "ico" = [ "bmp" "png" ];
          "jpeg" = [ "dep:jpeg" ];
          "jpeg_rayon" = [ "jpeg/rayon" ];
          "libwebp" = [ "dep:libwebp" ];
          "mp4parse" = [ "dep:mp4parse" ];
          "openexr" = [ "exr" ];
          "png" = [ "dep:png" ];
          "qoi" = [ "dep:qoi" ];
          "ravif" = [ "dep:ravif" ];
          "rgb" = [ "dep:rgb" ];
          "tiff" = [ "dep:tiff" ];
          "webp-encoder" = [ "libwebp" ];
        };
        resolvedDefaultFeatures = [ "gif" "jpeg" "png" ];
      };
      "imagesize" = rec {
        crateName = "imagesize";
        version = "0.12.0";
        edition = "2018";
        sha256 = "114jvqiyv13il1qghv2xm0xqrcjm68fh282hdlzdds6qfgsp7782";
        authors = [
          "Maid Dog <maiddogsrl@gmail.com>"
        ];

      };
      "indexmap 1.9.3" = rec {
        crateName = "indexmap";
        version = "1.9.3";
        edition = "2021";
        sha256 = "16dxmy7yvk51wvnih3a3im6fp5lmx0wx76i03n06wyak6cwhw1xx";
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" ];
        };
      };
      "indexmap 2.0.2" = rec {
        crateName = "indexmap";
        version = "2.0.2";
        edition = "2021";
        sha256 = "15q84zh8fafa3dlrnhy5yyxx14qg9v06757migmccwh2fbfkvpwa";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.2";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "indexmap-nostd" = rec {
        crateName = "indexmap-nostd";
        version = "0.4.0";
        edition = "2021";
        sha256 = "145mrkrrnzzg8xbv6si8j3b8cw1pi3g13vrjgf1fm2415gyy414f";
        authors = [
          "Robin Freyler <robin.freyler@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "is-terminal" = rec {
        crateName = "is-terminal";
        version = "0.4.9";
        edition = "2018";
        sha256 = "12xgvc7nsrp3pn8hcxajfhbli2l5wnh3679y2fmky88nhj4qj26b";
        authors = [
          "softprops <d.tangren@gmail.com>"
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: ("hermit" == target."os");
          }
          {
            name = "rustix";
            packageId = "rustix";
            target = { target, features }: (!((target."windows" or false) || ("hermit" == target."os") || ("unknown" == target."os")));
            features = [ "termios" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Console" ];
          }
        ];
        devDependencies = [
          {
            name = "rustix";
            packageId = "rustix";
            target = {target, features}: (!((target."windows" or false) || ("hermit" == target."os") || ("unknown" == target."os")));
            features = [ "stdio" ];
          }
        ];

      };
      "itertools" = rec {
        crateName = "itertools";
        version = "0.11.0";
        edition = "2018";
        sha256 = "0mzyqcc59azx9g5cg6fs8k529gvh4463smmka6jvzs3cd2jp7hdi";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "1.0.9";
        edition = "2018";
        sha256 = "0f6cpb4yqzhkrhhg6kqsw3wnmmhdnnffi6r2xzy248gzi2v0l5dg";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "jpeg-decoder" = rec {
        crateName = "jpeg-decoder";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0gkv0zx95i4fr40fj1a10d70lqi6lfyia8r5q8qjxj8j4pj0005w";
        authors = [
          "The image-rs Developers"
        ];
        features = {
          "default" = [ "rayon" ];
          "rayon" = [ "dep:rayon" ];
        };
      };
      "kamadak-exif" = rec {
        crateName = "kamadak-exif";
        version = "0.5.5";
        edition = "2018";
        sha256 = "0xw0lpmra8j1y98c0agwrmjajpkh91mnl89hzaxbdrdp186wfkzg";
        libName = "exif";
        authors = [
          "KAMADA Ken'ichi <kamada@nanohz.org>"
        ];
        dependencies = [
          {
            name = "mutate_once";
            packageId = "mutate_once";
          }
        ];

      };
      "kurbo" = rec {
        crateName = "kurbo";
        version = "0.9.5";
        edition = "2021";
        sha256 = "16w4k313z8smic4zifpwnxk8alh17dncgj2r40p0ql6rdivsb1dx";
        authors = [
          "Raph Levien <raph.levien@gmail.com>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
          "mint" = [ "dep:mint" ];
          "schemars" = [ "dep:schemars" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin" = [ "dep:spin" ];
          "spin_no_std" = [ "spin" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.149";
        edition = "2015";
        sha256 = "16z2zqswcbk1qg5yigfyr0d44v0974amdaj564dmv5dpi2y770d0";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "extra_traits" "std" ];
      };
      "libm" = rec {
        crateName = "libm";
        version = "0.2.8";
        edition = "2018";
        sha256 = "0n4hk1rs8pzw8hdfmwn96c4568s93kfxqgcqswr7sajd2diaihjf";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
          "musl-reference-tests" = [ "rand" ];
          "rand" = [ "dep:rand" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "line-wrap" = rec {
        crateName = "line-wrap";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1ffa2whkyh9mwvdlpk6v8pjkg8p8mlzyjfymq5adll9a18sl80zk";
        authors = [
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        dependencies = [
          {
            name = "safemem";
            packageId = "safemem";
          }
        ];

      };
      "linked-hash-map" = rec {
        crateName = "linked-hash-map";
        version = "0.5.6";
        edition = "2015";
        sha256 = "03vpgw7x507g524nx5i1jf5dl8k3kv0fzg8v3ip6qqwbpkqww5q7";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
        ];
        features = {
          "heapsize" = [ "dep:heapsize" ];
          "heapsize_impl" = [ "heapsize" ];
          "serde" = [ "dep:serde" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "linux-raw-sys" = rec {
        crateName = "linux-raw-sys";
        version = "0.4.10";
        edition = "2021";
        sha256 = "0gz0671d4hgrdngrryaajxl962ny4g40pykg0vq0pr32q3l7j96s";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "general" "errno" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "no_std" ];
        };
        resolvedDefaultFeatures = [ "elf" "errno" "general" "ioctl" "no_std" ];
      };
      "lipsum" = rec {
        crateName = "lipsum";
        version = "0.9.1";
        edition = "2021";
        sha256 = "0r40mf2cwh4fp9pdfcc1n8hjxw05w7galjvb1z23r5pq38jn0s33";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = [
          {
            name = "rand";
            packageId = "rand";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand";
          }
        ];

      };
      "litemap" = rec {
        crateName = "litemap";
        version = "0.7.2";
        edition = "2021";
        sha256 = "1ni2li389q8wf7gzgzw5bav3xpdabxl7avibdcw0d202bdl45mpr";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "bench" = [ "serde" ];
          "databake" = [ "dep:databake" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" ];
          "testing" = [ "alloc" ];
          "yoke" = [ "dep:yoke" ];
        };
        resolvedDefaultFeatures = [ "alloc" "serde" ];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.12";
        edition = "2021";
        sha256 = "05qvxa6g27yyva25a5ghsg85apdxkvr77yhkyhapj6r8vnf8pbq7";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "atomic_usize" ];
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "atomic_usize" "default" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.20";
        edition = "2015";
        sha256 = "13rf7wphnwd61vazpxr7fiycin6cb1g8fmvgqg18i464p0y1drmm";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_unstable" = [ "value-bag" ];
          "kv_unstable_serde" = [ "kv_unstable_std" "value-bag/serde" "serde" ];
          "kv_unstable_std" = [ "std" "kv_unstable" "value-bag/error" ];
          "kv_unstable_sval" = [ "kv_unstable" "value-bag/sval" "sval" "sval_ref" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "matchers" = rec {
        crateName = "matchers";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0n2mbk7lg2vf962c8xwzdq96yrc9i0p8dbmm4wa1nnkcp1dhfqw2";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata 0.1.10";
          }
        ];

      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.6.4";
        edition = "2021";
        sha256 = "0rq1ka8790ns41j147npvxcqcl2anxyngsdimy85ag2api0fwrgn";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "logging" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "std" = [ "alloc" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.7.1";
        edition = "2018";
        sha256 = "1ivl3rbbdm53bzscrd01g60l46lz5krl270487d8lhjvwl5hx0g7";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler";
            packageId = "adler";
            usesDefaultFeatures = false;
          }
          {
            name = "simd-adler32";
            packageId = "simd-adler32";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "adler/rustc-dep-of-std" ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
        resolvedDefaultFeatures = [ "default" "simd" "simd-adler32" "with-alloc" ];
      };
      "mutate_once" = rec {
        crateName = "mutate_once";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0ys9mpjhwsj5md10ykmkin0wv7bz8dvc292hqczs9l5l4cd6ikqn";
        authors = [
          "KAMADA Ken'ichi <kamada@nanohz.org>"
        ];

      };
      "nu-ansi-term" = rec {
        crateName = "nu-ansi-term";
        version = "0.46.0";
        edition = "2018";
        sha256 = "115sywxh53p190lyw97alm14nc004qj5jm5lvdj608z84rbida3p";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "The Nushell Project Developers"
        ];
        dependencies = [
          {
            name = "overload";
            packageId = "overload";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os");
            features = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "processenv" ];
          }
        ];
        features = {
          "derive_serde_style" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "num-bigint" = rec {
        crateName = "num-bigint";
        version = "0.4.4";
        edition = "2018";
        sha256 = "1h6d8pd0h7grpva2pa78i7lhvl69kqdq156qcaicpmy3nmcpd3k0";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.45";
        edition = "2015";
        sha256 = "1ncwavvwdmsqzxnn65phv6c6nn72pnv9xhpmjd6a429mzf4k6p92";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "i128" ];
      };
      "num-rational" = rec {
        crateName = "num-rational";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1c0rb8x4avxy3jvvzv764yk7afipzxncfnqlb10r3h53s34s2f06";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "num-bigint-std" "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "num-bigint-std" = [ "num-bigint/std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.17";
        edition = "2018";
        sha256 = "0z16bi5zwgfysz6765v3rd6whfbjpihx3mhsn4dg8dzj2c221qrr";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "numerals" = rec {
        crateName = "numerals";
        version = "0.1.4";
        edition = "2015";
        sha256 = "0cdx6yf5zcx2nvmzavr4qk9m35ha6i2rhy5fjxgx2wm7fq9y4nz2";
        authors = [
          "Benjamin Sago <ogham@bsago.me>"
        ];

      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.18.0";
        edition = "2021";
        sha256 = "0vapcd5ambwck95wyz3ymlim35jirgnqn9a0qmi19msymv95v2yx";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [ "dep:critical-section" "dep:atomic-polyfill" ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "race" "std" ];
      };
      "overload" = rec {
        crateName = "overload";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0fdgbaqwknillagy1xq7xfgv60qdbk010diwl7s1p0qx7hb16n5i";
        authors = [
          "Daniel Salvadori <danaugrs@gmail.com>"
        ];

      };
      "palette" = rec {
        crateName = "palette";
        version = "0.7.3";
        edition = "2018";
        sha256 = "1p2inf23vsqy06w7vp7rcxmb9vk91asib534m9cafykn8x0z7qmj";
        build = "build/main.rs";
        authors = [
          "Erik Hedvall <hello@erikhedvall.nu>"
        ];
        dependencies = [
          {
            name = "approx";
            packageId = "approx";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "fast-srgb8";
            packageId = "fast-srgb8";
          }
          {
            name = "libm";
            packageId = "libm";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "palette_derive";
            packageId = "palette_derive";
          }
        ];
        features = {
          "approx" = [ "dep:approx" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "named_from_str" "std" "approx" ];
          "find-crate" = [ "palette_derive/find-crate" ];
          "libm" = [ "dep:libm" ];
          "named_from_str" = [ "named" "phf" ];
          "phf" = [ "dep:phf" ];
          "rand" = [ "dep:rand" ];
          "random" = [ "rand" ];
          "serde" = [ "dep:serde" ];
          "serializing" = [ "serde" "std" ];
          "std" = [ "approx?/std" ];
          "wide" = [ "dep:wide" ];
        };
        resolvedDefaultFeatures = [ "approx" "libm" ];
      };
      "palette_derive" = rec {
        crateName = "palette_derive";
        version = "0.7.3";
        edition = "2018";
        sha256 = "02ps239sxcr5v294qf89d87sv7fdm9pr2cziwj2l6ggzql703nxp";
        procMacro = true;
        authors = [
          "Erik Hedvall <hello@erikhedvall.nu>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "extra-traits" "proc-macro" ];
          }
        ];
        features = {
          "find-crate" = [ "dep:find-crate" ];
        };
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.12.2";
        edition = "2021";
        sha256 = "1ys2dzz6cysjmwyivwxczl1ljpcf5cj4qmhdj07d5bkc9z5g0jky";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.9.10";
        edition = "2021";
        sha256 = "1y3cf9ld9ijf7i4igwzffcn0xl16dxyn4c5bwgjck1dkgabiyh0y";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: ("redox" == target."os");
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "paste" = rec {
        crateName = "paste";
        version = "1.0.14";
        edition = "2018";
        sha256 = "0k7d54zz8zrz0623l3xhvws61z5q2wd3hkwim6gylk8212placfy";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "phf" = rec {
        crateName = "phf";
        version = "0.11.2";
        edition = "2021";
        sha256 = "1p03rsw66l7naqhpgr1a34r9yzi1gv9jh16g3fsk6wrwyfwdiqmd";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_macros";
            packageId = "phf_macros";
            optional = true;
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "macros" = [ "phf_macros" ];
          "phf_macros" = [ "dep:phf_macros" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "phf_shared/std" ];
          "uncased" = [ "phf_shared/uncased" ];
          "unicase" = [ "phf_macros?/unicase" "phf_shared/unicase" ];
        };
        resolvedDefaultFeatures = [ "default" "macros" "phf_macros" "std" ];
      };
      "phf_generator" = rec {
        crateName = "phf_generator";
        version = "0.11.2";
        edition = "2021";
        crateBin = [];
        sha256 = "1c14pjyxbcpwkdgw109f7581cc5fa3fnkzdq1ikvx7mdq9jcrr28";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand";
            usesDefaultFeatures = false;
            features = [ "small_rng" ];
          }
        ];
        features = {
          "criterion" = [ "dep:criterion" ];
        };
      };
      "phf_macros" = rec {
        crateName = "phf_macros";
        version = "0.11.2";
        edition = "2021";
        sha256 = "0js61lc0bhzzrbd9vhpcqp11vvwckdkz3g7k95z5h1k651p68i1l";
        procMacro = true;
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        features = {
          "unicase" = [ "unicase_" "phf_shared/unicase" ];
          "unicase_" = [ "dep:unicase_" ];
        };
      };
      "phf_shared" = rec {
        crateName = "phf_shared";
        version = "0.11.2";
        edition = "2021";
        sha256 = "0azphb0a330ypqx3qvyffal5saqnks0xvl8rj73jlk3qxxgbkz4h";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher 0.3.11";
          }
        ];
        features = {
          "default" = [ "std" ];
          "uncased" = [ "dep:uncased" ];
          "unicase" = [ "dep:unicase" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "pico-args" = rec {
        crateName = "pico-args";
        version = "0.5.0";
        edition = "2018";
        sha256 = "05d30pvxd6zlnkg2i3ilr5a70v3f3z2in18m67z25vinmykngqav";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "eq-separator" ];
      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.13";
        edition = "2018";
        sha256 = "0n0bwr5qxlf0mhn2xkl36sy55118s9qmvx2yl5f3ixkb007lbywa";

      };
      "plist" = rec {
        crateName = "plist";
        version = "1.5.1";
        edition = "2021";
        sha256 = "1al7fh4ilxdiqila8blyrpy34jhdy5687gzldbf0j6mjbzy0qjls";
        authors = [
          "Ed Barnard <eabarnard@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
          }
          {
            name = "line-wrap";
            packageId = "line-wrap";
          }
          {
            name = "quick-xml";
            packageId = "quick-xml 0.30.0";
            rename = "quick_xml";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
            features = [ "parsing" "formatting" ];
          }
        ];
        features = {
          "default" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" ];
      };
      "png" = rec {
        crateName = "png";
        version = "0.17.10";
        edition = "2018";
        sha256 = "0r5a8a25ad0jq2pkp2zbab3wwhpgp6jmdg6d0ybjnw6kilnvyxfx";
        authors = [
          "The image-rs Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "fdeflate";
            packageId = "fdeflate";
          }
          {
            name = "flate2";
            packageId = "flate2";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            features = [ "simd" ];
          }
        ];
        features = {
        };
      };
      "portable-atomic" = rec {
        crateName = "portable-atomic";
        version = "1.6.0";
        edition = "2018";
        sha256 = "1h77x9qx7pns0d66vdrmdbmwpi7586h7ysnkdnhrn5mwi2cyyw3i";
        features = {
          "critical-section" = [ "dep:critical-section" ];
          "default" = [ "fallback" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "fallback" ];
      };
      "postcard" = rec {
        crateName = "postcard";
        version = "1.0.8";
        edition = "2018";
        sha256 = "1y106iwjv6vm7s4zkszgxlhacca1xbw6qcwf8il7xc0ddkp52p55";
        authors = [
          "James Munns <james@onevariable.com>"
        ];
        dependencies = [
          {
            name = "cobs";
            packageId = "cobs";
            usesDefaultFeatures = false;
          }
          {
            name = "embedded-io";
            packageId = "embedded-io";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" "embedded-io/alloc" ];
          "const_format" = [ "dep:const_format" ];
          "crc" = [ "dep:crc" ];
          "default" = [ "heapless-cas" ];
          "defmt" = [ "dep:defmt" ];
          "embedded-io" = [ "dep:embedded-io" ];
          "experimental-derive" = [ "postcard-derive" "const_format" ];
          "heapless" = [ "dep:heapless" ];
          "heapless-cas" = [ "heapless" "heapless/cas" ];
          "paste" = [ "dep:paste" ];
          "postcard-derive" = [ "dep:postcard-derive" ];
          "use-crc" = [ "crc" "paste" ];
          "use-defmt" = [ "defmt" ];
          "use-std" = [ "serde/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "embedded-io" ];
      };
      "powerfmt" = rec {
        crateName = "powerfmt";
        version = "0.2.0";
        edition = "2021";
        sha256 = "14ckj2xdpkhv3h6l5sdmb9f1d57z8hbfpdldjc2vl5givq2y77j3";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        features = {
          "default" = [ "std" "macros" ];
          "macros" = [ "dep:powerfmt-macros" ];
          "std" = [ "alloc" ];
        };
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.17";
        edition = "2018";
        sha256 = "1pp6g52aw970adv3x2310n7glqnji96z0a9wiamzw89ibf0ayh2v";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.69";
        edition = "2021";
        sha256 = "1nljgyllbm3yr3pa081bf83gxh6l4zvjqzaldw7v4mj9xfgihk0k";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "psm" = rec {
        crateName = "psm";
        version = "0.1.21";
        edition = "2015";
        sha256 = "0x78nj5wxkxwijd2gvv2ycq06443b2y1ih4j46kk6c2flg6zg1sp";
        authors = [
          "Simonas Kazlauskas <psm@kazlauskas.me>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "qcms" = rec {
        crateName = "qcms";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1yihv9rsa0qc4mmhzp8f0xdfrnkw7q8l7kr4ivcyb9amszazrv7d";
        authors = [
          "Jeff Muizelaar"
          "Benoit Girard"
          "Andrew Osmond"
        ];
        features = {
          "c_bindings" = [ "libc" ];
          "default" = [ "iccv4-enabled" "cmyk" ];
          "libc" = [ "dep:libc" ];
        };
        resolvedDefaultFeatures = [ "cmyk" "default" "iccv4-enabled" ];
      };
      "quick-xml 0.30.0" = rec {
        crateName = "quick-xml";
        version = "0.30.0";
        edition = "2018";
        sha256 = "0mp9cqy06blsaka3r1n2p40ddmzhsf7bx37x22r5faw6hq753xpg";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "async-tokio" = [ "tokio" ];
          "document-features" = [ "dep:document-features" ];
          "encoding" = [ "encoding_rs" ];
          "encoding_rs" = [ "dep:encoding_rs" ];
          "serde" = [ "dep:serde" ];
          "serde-types" = [ "serde/derive" ];
          "serialize" = [ "serde" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "quick-xml 0.31.0" = rec {
        crateName = "quick-xml";
        version = "0.31.0";
        edition = "2021";
        sha256 = "0cravqanylzh5cq2v6hzlfqgxcid5nrp2snnb3pf4m0and2a610h";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "async-tokio" = [ "tokio" ];
          "document-features" = [ "dep:document-features" ];
          "encoding" = [ "encoding_rs" ];
          "encoding_rs" = [ "dep:encoding_rs" ];
          "serde" = [ "dep:serde" ];
          "serde-types" = [ "serde/derive" ];
          "serialize" = [ "serde" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "default" "overlapped-lists" "serde" "serialize" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.33";
        edition = "2018";
        sha256 = "1biw54hbbr12wdwjac55z1m2x2rylciw83qnjn564a3096jgqrsj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "rand" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" "std_rng" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_chacha" = [ "dep:rand_chacha" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" "rand_core/serde1" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "std_rng" = [ "rand_chacha" ];
        };
        resolvedDefaultFeatures = [ "alloc" "small_rng" ];
      };
      "rand_chacha" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rand_core" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "rayon" = rec {
        crateName = "rayon";
        version = "1.10.0";
        edition = "2021";
        sha256 = "1ylgnzwgllajalr4v00y4kj22klq2jbwllm70aha232iah0sc65l";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon-core";
            packageId = "rayon-core";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" "rayon-core/web_spin_lock" ];
        };
      };
      "rayon-core" = rec {
        crateName = "rayon-core";
        version = "1.12.1";
        edition = "2021";
        sha256 = "1qpwim68ai5h0j7axa8ai8z0payaawv3id0lrgkqmapx7lx8fr8l";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" ];
        };
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0zja6y3av9z50gg1hh0vsc053941wng21r43whhk8mfb9n4m5426";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "bitflags/rustc-dep-of-std" ];
        };
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.10.2";
        edition = "2021";
        sha256 = "0hxkd814n4irind8im5c9am221ri6bprx49nc7yxv02ykhd9a2rq";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.3";
            usesDefaultFeatures = false;
            features = [ "alloc" "syntax" "meta" "nfa-pikevm" ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" "regex-syntax/default" ];
          "logging" = [ "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal" ];
          "perf-backtrack" = [ "regex-automata/nfa-backtrack" ];
          "perf-dfa" = [ "regex-automata/hybrid" ];
          "perf-dfa-full" = [ "regex-automata/dfa-build" "regex-automata/dfa-search" ];
          "perf-inline" = [ "regex-automata/perf-inline" ];
          "perf-literal" = [ "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal" ];
          "perf-onepass" = [ "regex-automata/dfa-onepass" ];
          "std" = [ "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode" ];
          "unicode-age" = [ "regex-automata/unicode-age" "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-automata/unicode-bool" "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-automata/unicode-case" "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-automata/unicode-script" "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-automata/unicode-segment" "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "perf" "perf-backtrack" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "perf-onepass" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-automata 0.1.10" = rec {
        crateName = "regex-automata";
        version = "0.1.10";
        edition = "2015";
        sha256 = "0ci1hvbzhrfby5fdpf4ganhf7kla58acad9i1ff1p34dzdrhs8vc";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.6.29";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "fst" = [ "dep:fst" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "std" = [ "regex-syntax" ];
          "transducer" = [ "std" "fst" ];
        };
        resolvedDefaultFeatures = [ "default" "regex-syntax" "std" ];
      };
      "regex-automata 0.4.3" = rec {
        crateName = "regex-automata";
        version = "0.4.3";
        edition = "2021";
        sha256 = "0gs8q9yhd3kcg4pr00ag4viqxnh5l7jpyb9fsfr8hzh451w4r02z";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.2";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid" ];
          "dfa" = [ "dfa-build" "dfa-search" "dfa-onepass" ];
          "dfa-build" = [ "nfa-thompson" "dfa-search" ];
          "dfa-onepass" = [ "nfa-thompson" ];
          "hybrid" = [ "alloc" "nfa-thompson" ];
          "internal-instrument" = [ "internal-instrument-pikevm" ];
          "internal-instrument-pikevm" = [ "logging" "std" ];
          "logging" = [ "dep:log" "aho-corasick?/logging" "memchr?/logging" ];
          "meta" = [ "syntax" "nfa-pikevm" ];
          "nfa" = [ "nfa-thompson" "nfa-pikevm" "nfa-backtrack" ];
          "nfa-backtrack" = [ "nfa-thompson" ];
          "nfa-pikevm" = [ "nfa-thompson" ];
          "nfa-thompson" = [ "alloc" ];
          "perf" = [ "perf-inline" "perf-literal" ];
          "perf-literal" = [ "perf-literal-substring" "perf-literal-multisubstring" ];
          "perf-literal-multisubstring" = [ "std" "dep:aho-corasick" ];
          "perf-literal-substring" = [ "aho-corasick?/perf-literal" "dep:memchr" ];
          "std" = [ "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc" ];
          "syntax" = [ "dep:regex-syntax" "alloc" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode" ];
          "unicode-age" = [ "regex-syntax?/unicode-age" ];
          "unicode-bool" = [ "regex-syntax?/unicode-bool" ];
          "unicode-case" = [ "regex-syntax?/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax?/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax?/unicode-perl" ];
          "unicode-script" = [ "regex-syntax?/unicode-script" ];
          "unicode-segment" = [ "regex-syntax?/unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "alloc" "dfa-onepass" "hybrid" "meta" "nfa-backtrack" "nfa-pikevm" "nfa-thompson" "perf-inline" "perf-literal" "perf-literal-multisubstring" "perf-literal-substring" "std" "syntax" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" ];
      };
      "regex-syntax 0.6.29" = rec {
        crateName = "regex-syntax";
        version = "0.6.29";
        edition = "2018";
        sha256 = "1qgj49vm6y3zn1hi09x91jvgkl2b1fiaq402skj83280ggfwcqpi";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-syntax 0.8.2" = rec {
        crateName = "regex-syntax";
        version = "0.8.2";
        edition = "2021";
        sha256 = "17rd2s8xbiyf6lb4aj2nfi44zqlj98g2ays8zzj2vfs743k79360";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "roxmltree" = rec {
        crateName = "roxmltree";
        version = "0.19.0";
        edition = "2021";
        sha256 = "0zs0q8hg5nnh91s1ib6r0fky7xm8ay63ayfa5i1afxxpwgalzl9w";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        features = {
          "default" = [ "std" "positions" ];
        };
        resolvedDefaultFeatures = [ "default" "positions" "std" ];
      };
      "rustix" = rec {
        crateName = "rustix";
        version = "0.38.21";
        edition = "2021";
        sha256 = "18q2mx7gnnl1238psb1r0avdw00l8y0jxkxgimyhmmg50q2nnhib";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os") && ("little" == target."endian") && (("arm" == target."arch") || (("aarch64" == target."arch") && ("64" == target."pointer_width")) || ("riscv64" == target."arch") || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch")) || ("x86" == target."arch") || (("x86_64" == target."arch") && ("64" == target."pointer_width"))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os") && ("little" == target."endian") && (("arm" == target."arch") || (("aarch64" == target."arch") && ("64" == target."pointer_width")) || ("riscv64" == target."arch") || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch")) || ("x86" == target."arch") || (("x86_64" == target."arch") && ("64" == target."pointer_width")))))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os") && ("little" == target."endian") && (("arm" == target."arch") || (("aarch64" == target."arch") && ("64" == target."pointer_width")) || ("riscv64" == target."arch") || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch")) || ("x86" == target."arch") || (("x86_64" == target."arch") && ("64" == target."pointer_width"))));
            features = [ "extra_traits" ];
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os") && ("little" == target."endian") && (("arm" == target."arch") || (("aarch64" == target."arch") && ("64" == target."pointer_width")) || ("riscv64" == target."arch") || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch")) || ("x86" == target."arch") || (("x86_64" == target."arch") && ("64" == target."pointer_width")))))));
            features = [ "extra_traits" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ((("android" == target."os") || ("linux" == target."os")) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os") && ("little" == target."endian") && (("arm" == target."arch") || (("aarch64" == target."arch") && ("64" == target."pointer_width")) || ("riscv64" == target."arch") || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch")) || ("x86" == target."arch") || (("x86_64" == target."arch") && ("64" == target."pointer_width")))))));
            features = [ "general" "ioctl" "no_std" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os") && ("little" == target."endian") && (("arm" == target."arch") || (("aarch64" == target."arch") && ("64" == target."pointer_width")) || ("riscv64" == target."arch") || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch")) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch")) || ("x86" == target."arch") || (("x86_64" == target."arch") && ("64" == target."pointer_width"))));
            features = [ "general" "errno" "ioctl" "no_std" "elf" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_NetworkManagement_IpHelper" "Win32_System_Threading" ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [ "event" "fs" "io_uring" "mm" "mount" "net" "param" "pipe" "process" "procfs" "pty" "rand" "runtime" "shm" "stdio" "system" "termios" "thread" "time" ];
          "default" = [ "std" "use-libc-auxv" ];
          "io_uring" = [ "event" "fs" "net" "linux-raw-sys/io_uring" ];
          "itoa" = [ "dep:itoa" ];
          "libc" = [ "dep:libc" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_latest" = [ "linux_4_11" ];
          "net" = [ "linux-raw-sys/net" "linux-raw-sys/netlink" "linux-raw-sys/if_ether" ];
          "once_cell" = [ "dep:once_cell" ];
          "param" = [ "fs" ];
          "process" = [ "linux-raw-sys/prctl" ];
          "procfs" = [ "once_cell" "itoa" "fs" ];
          "pty" = [ "itoa" "fs" ];
          "runtime" = [ "linux-raw-sys/prctl" ];
          "rustc-dep-of-std" = [ "dep:core" "dep:alloc" "dep:compiler_builtins" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std" "compiler_builtins?/rustc-dep-of-std" ];
          "shm" = [ "fs" ];
          "std" = [ "bitflags/std" "alloc" "libc?/std" "libc_errno?/std" ];
          "system" = [ "linux-raw-sys/system" ];
          "thread" = [ "linux-raw-sys/prctl" ];
          "use-libc" = [ "libc_errno" "libc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "termios" "use-libc-auxv" ];
      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.17";
        edition = "2018";
        sha256 = "1mm3fckyvb0l2209in1n2k05sws5d9mpkszbnwhq3pkq8apjhpcm";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "rustybuzz" = rec {
        crateName = "rustybuzz";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0b12arlca4lfniphg91v9s5awkl7szpdwc18walxdamyqn95dbph";
        authors = [
          "Evgeniy Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "extern_crate_alloc" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "ttf-parser";
            packageId = "ttf-parser";
            usesDefaultFeatures = false;
            features = [ "opentype-layout" "apple-layout" "variable-fonts" "glyph-names" ];
          }
          {
            name = "unicode-bidi-mirroring";
            packageId = "unicode-bidi-mirroring";
          }
          {
            name = "unicode-ccc";
            packageId = "unicode-ccc";
          }
          {
            name = "unicode-properties";
            packageId = "unicode-properties";
            usesDefaultFeatures = false;
            features = [ "general-category" ];
          }
          {
            name = "unicode-script";
            packageId = "unicode-script";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.15";
        edition = "2018";
        sha256 = "0hfphpn1xnpzxwj8qg916ga1lyc33lc03lnf1gb3wwpglj6wrm0s";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "safemem" = rec {
        crateName = "safemem";
        version = "0.3.3";
        edition = "2015";
        sha256 = "0wp0d2b2284lw11xhybhaszsczpbq1jbdklkxgifldcknmy3nw7g";
        authors = [
          "Austin Bonander <austin.bonander@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.190";
        edition = "2018";
        sha256 = "1xwndn6n8pb8y0vd84sba1nvfdf4x27nkbgnqsi99s0yr8sc7lwi";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "derive" "serde_derive" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.190";
        edition = "2015";
        sha256 = "1qy0697y6rbsqvaq7sgy8bpq1sh4h13xmvsizkbjnp2f76gn1ib7";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.109";
        edition = "2021";
        sha256 = "1sdrsz5sldavrq55xmxnvy5zsshd6dly5k2kwfidfsjh6g2m41nb";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" "std" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_spanned" = rec {
        crateName = "serde_spanned";
        version = "0.6.4";
        edition = "2021";
        sha256 = "102ym47sr1y48ml42wjv6aq8y77bij1qckx1j0gb3rbka21jn0hj";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "serde_yaml" = rec {
        crateName = "serde_yaml";
        version = "0.9.29";
        edition = "2021";
        sha256 = "0aci065jjqjwxn4qm27r4li20w1wfdd6vgx0j34affgrdgv0wpm1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.0.2";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "unsafe-libyaml";
            packageId = "unsafe-libyaml";
          }
        ];

      };
      "sharded-slab" = rec {
        crateName = "sharded-slab";
        version = "0.1.7";
        edition = "2018";
        sha256 = "1xipjr4nqsgw34k7a2cgj9zaasl2ds6jwn89886kww93d32a637l";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "simd-adler32" = rec {
        crateName = "simd-adler32";
        version = "0.3.7";
        edition = "2018";
        sha256 = "1zkq40c3iajcnr5936gjp9jjh1lpzhy44p3dq3fiw75iwr1w2vfn";
        authors = [
          "Marvin Countryman <me@maar.vin>"
        ];
        features = {
          "default" = [ "std" "const-generics" ];
        };
        resolvedDefaultFeatures = [ "const-generics" "default" "std" ];
      };
      "similar" = rec {
        crateName = "similar";
        version = "2.3.0";
        edition = "2018";
        sha256 = "15rm8lh2lbkk3dvmsj29ki78cz9k2nh7qpczjmk9sh9chq1zbsia";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
          "Pierre-Étienne Meunier <pe@pijul.org>"
          "Brandon Williams <bwilliams.eng@gmail.com>"
        ];
        dependencies = [
          {
            name = "bstr";
            packageId = "bstr 0.2.17";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
            optional = true;
          }
        ];
        features = {
          "bstr" = [ "dep:bstr" ];
          "bytes" = [ "bstr" "text" ];
          "default" = [ "text" ];
          "inline" = [ "text" ];
          "serde" = [ "dep:serde" ];
          "unicode" = [ "text" "unicode-segmentation" "bstr/unicode" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "bstr" "default" "inline" "text" "unicode" "unicode-segmentation" ];
      };
      "similar-asserts" = rec {
        crateName = "similar-asserts";
        version = "1.5.0";
        edition = "2018";
        sha256 = "03zwg4vy2c258v8sa13snfpz22akcqdxa49l467s3z0vgn1bnhg0";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "console";
            packageId = "console";
            usesDefaultFeatures = false;
          }
          {
            name = "similar";
            packageId = "similar";
            features = [ "inline" ];
          }
        ];
        features = {
          "default" = [ "unicode" ];
          "serde" = [ "dep:serde" ];
          "unicode" = [ "similar/unicode" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode" ];
      };
      "simplecss" = rec {
        crateName = "simplecss";
        version = "0.2.1";
        edition = "2018";
        sha256 = "17g8q1z9xrkd27ic9nrfirj6in4rai6l9ws0kxz45n97573ff6x1";
        authors = [
          "Reizner Evgeniy <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];

      };
      "siphasher 0.3.11" = rec {
        crateName = "siphasher";
        version = "0.3.11";
        edition = "2018";
        sha256 = "03axamhmwsrmh0psdw3gf7c0zc4fyl5yjxfifz9qfka6yhkqid9q";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "siphasher 1.0.1" = rec {
        crateName = "siphasher";
        version = "1.0.1";
        edition = "2018";
        sha256 = "17f35782ma3fn6sh21c027kjmd227xyrx06ffi8gw4xzv9yry6an";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slotmap" = rec {
        crateName = "slotmap";
        version = "1.0.6";
        edition = "2018";
        sha256 = "0hhkvsc3x79c7fh97b3padjhssd19hzdyyiv291mr3qf3lk8xq71";
        authors = [
          "Orson Peters <orsonpeters@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.11.1";
        edition = "2018";
        sha256 = "0nmx8aw3v4jglqdcjv4hhn10d6g52c4bhjlzwf952885is04lawl";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "const_new" = [ "const_generics" ];
          "drain_keep_rest" = [ "drain_filter" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "const_generics" "const_new" "union" ];
      };
      "spin" = rec {
        crateName = "spin";
        version = "0.9.8";
        edition = "2015";
        sha256 = "0rvam5r0p3a6qhc18scqpvpgb3ckzyqxpgdfyjnghh8ja7byi039";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        features = {
          "barrier" = [ "mutex" ];
          "default" = [ "lock_api" "mutex" "spin_mutex" "rwlock" "once" "lazy" "barrier" ];
          "fair_mutex" = [ "mutex" ];
          "lazy" = [ "once" ];
          "lock_api" = [ "lock_api_crate" ];
          "lock_api_crate" = [ "dep:lock_api_crate" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "portable_atomic" = [ "portable-atomic" ];
          "spin_mutex" = [ "mutex" ];
          "ticket_mutex" = [ "mutex" ];
          "use_ticket_mutex" = [ "mutex" "ticket_mutex" ];
        };
        resolvedDefaultFeatures = [ "mutex" "rwlock" "spin_mutex" "std" ];
      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1lxjr8q2n534b2lhkxd6l6wcddzjvnksi58zv11f9y0jjmr15wd8";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "stacker" = rec {
        crateName = "stacker";
        version = "0.1.15";
        edition = "2015";
        sha256 = "1klz4mk1iqn3jixhnls6ia4ql4fpinnfjibxabpx6pqmh12bv1n8";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Simonas Kazlauskas <stacker@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "psm";
            packageId = "psm";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "memoryapi" "winbase" "fibersapi" "processthreadsapi" "minwindef" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "strict-num" = rec {
        crateName = "strict-num";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0cb7l1vhb8zj90mzm8avlk815k40sql9515s865rqdrdfavvldv6";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "float-cmp";
            packageId = "float-cmp";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "approx-eq" = [ "float-cmp" ];
          "default" = [ "approx-eq" ];
          "float-cmp" = [ "dep:float-cmp" ];
        };
        resolvedDefaultFeatures = [ "approx-eq" "default" "float-cmp" ];
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.10.0";
        edition = "2015";
        sha256 = "08s69r4rcrahwnickvi0kq49z524ci50capybln83mg6b473qivk";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
        ];

      };
      "strum" = rec {
        crateName = "strum";
        version = "0.26.2";
        edition = "2018";
        sha256 = "0aayk2m3cw9zz12qn82kqaayq43xdgdpcy9b5d1lq6d504syr32x";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "std" "strum_macros" ];
      };
      "strum_macros" = rec {
        crateName = "strum_macros";
        version = "0.26.2";
        edition = "2018";
        sha256 = "0in9jvbb3g16x8fj7lf91vwzj98319hj3z8lpaaa9h42ybd5kky6";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "parsing" "extra-traits" ];
          }
        ];

      };
      "svgtypes" = rec {
        crateName = "svgtypes";
        version = "0.13.0";
        edition = "2018";
        sha256 = "0w4xknlff1np8l9if7y8ig6bx44bjr006m5xgj8ih0wnrn4f4i3f";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "kurbo";
            packageId = "kurbo";
          }
          {
            name = "siphasher";
            packageId = "siphasher 0.3.11";
          }
        ];

      };
      "syn" = rec {
        crateName = "syn";
        version = "2.0.38";
        edition = "2021";
        sha256 = "12s06bi068scc4fpv2x2bp3lx2vxnk4s0qv3w9hqznrpl6m7jsz9";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "quote" "visit" "visit-mut" ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.13.1";
        edition = "2018";
        sha256 = "0wc9f002ia2zqcbj0q2id5x6n7g1zjqba7qkg2mr0qvvmdk7dby8";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "syntect" = rec {
        crateName = "syntect";
        version = "5.2.0";
        edition = "2021";
        sha256 = "1ca68wxr8qs99ivqc266492sz8qwfngswizr7hrh8mlrcfiwykc7";
        authors = [
          "Tristan Hume <tristan@thume.ca>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "fancy-regex";
            packageId = "fancy-regex";
            optional = true;
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
          }
          {
            name = "fnv";
            packageId = "fnv";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "plist";
            packageId = "plist";
            optional = true;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.2";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "yaml-rust";
            packageId = "yaml-rust";
            optional = true;
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" ];
          "default" = [ "default-onig" ];
          "default-fancy" = [ "parsing" "default-syntaxes" "default-themes" "html" "plist-load" "yaml-load" "dump-load" "dump-create" "regex-fancy" ];
          "default-onig" = [ "parsing" "default-syntaxes" "default-themes" "html" "plist-load" "yaml-load" "dump-load" "dump-create" "regex-onig" ];
          "default-syntaxes" = [ "parsing" "dump-load" ];
          "default-themes" = [ "dump-load" ];
          "dump-create" = [ "flate2" "bincode" ];
          "dump-load" = [ "flate2" "bincode" ];
          "fancy-regex" = [ "dep:fancy-regex" ];
          "flate2" = [ "dep:flate2" ];
          "fnv" = [ "dep:fnv" ];
          "html" = [ "parsing" ];
          "metadata" = [ "parsing" "plist-load" ];
          "onig" = [ "dep:onig" ];
          "parsing" = [ "regex-syntax" "fnv" "dump-create" "dump-load" ];
          "plist" = [ "dep:plist" ];
          "plist-load" = [ "plist" ];
          "regex-fancy" = [ "fancy-regex" ];
          "regex-onig" = [ "onig" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "yaml-load" = [ "yaml-rust" "parsing" ];
          "yaml-rust" = [ "dep:yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "bincode" "dump-create" "dump-load" "fancy-regex" "flate2" "fnv" "parsing" "plist" "plist-load" "regex-fancy" "regex-syntax" "yaml-load" "yaml-rust" ];
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.3.0";
        edition = "2018";
        sha256 = "0r1byqaq6f97qd0wc7k09lza190apvj9301s2afsp6m6gp9vm4v0";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.50";
        edition = "2021";
        sha256 = "1ll2sfbrxks8jja161zh1pgm3yssr7aawdmaa2xmcwcsbh7j39zr";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];

      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.50";
        edition = "2021";
        sha256 = "1f0lmam4765sfnwr4b1n00y14vxh10g0311mkk0adr80pi02wsr6";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];

      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.1.7";
        edition = "2021";
        sha256 = "0lp19jdgvp5m4l60cgxdnl00yw1hlqy8gcywg9bddwng9h36zp9z";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
        };
      };
      "time" = rec {
        crateName = "time";
        version = "0.3.30";
        edition = "2021";
        sha256 = "1xgnflidij6361zjg4mzz4lqndayq1ph82n1cbjydppj02rlm8y4";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "deranged";
            packageId = "deranged";
            usesDefaultFeatures = false;
            features = [ "powerfmt" ];
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "powerfmt";
            packageId = "powerfmt";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
          {
            name = "time-macros";
            packageId = "time-macros";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "time-macros";
            packageId = "time-macros";
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" ];
          "formatting" = [ "dep:itoa" "std" "time-macros?/formatting" ];
          "large-dates" = [ "time-macros?/large-dates" ];
          "local-offset" = [ "std" "dep:libc" "dep:num_threads" ];
          "macros" = [ "dep:time-macros" ];
          "parsing" = [ "time-macros?/parsing" ];
          "quickcheck" = [ "dep:quickcheck" "alloc" "deranged/quickcheck" ];
          "rand" = [ "dep:rand" "deranged/rand" ];
          "serde" = [ "dep:serde" "time-macros?/serde" "deranged/serde" ];
          "serde-human-readable" = [ "serde" "formatting" "parsing" ];
          "serde-well-known" = [ "serde" "formatting" "parsing" ];
          "std" = [ "alloc" "deranged/std" ];
          "wasm-bindgen" = [ "dep:js-sys" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "formatting" "macros" "parsing" "std" ];
      };
      "time-core" = rec {
        crateName = "time-core";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1wx3qizcihw6z151hywfzzyd1y5dl804ydyxci6qm07vbakpr4pg";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];

      };
      "time-macros" = rec {
        crateName = "time-macros";
        version = "0.2.15";
        edition = "2021";
        sha256 = "086frcn3m2yh3fji3wv9r35c3zjxjq8ngam7xnngiqd9vdl0vmsa";
        procMacro = true;
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "time-core";
            packageId = "time-core";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "formatting" "parsing" ];
      };
      "tiny-skia-path" = rec {
        crateName = "tiny-skia-path";
        version = "0.11.4";
        edition = "2018";
        sha256 = "14ywbdfakvacl6rxxmzbnycplaxpc6i2linh2yqk0sp8qb07z7lw";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "strict-num";
            packageId = "strict-num";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
          "no-std-float" = [ "libm" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "tinystr" = rec {
        crateName = "tinystr";
        version = "0.7.5";
        edition = "2021";
        sha256 = "1khf3j95bwwksj2hw76nlvwlwpwi4d1j421lj6x35arqqprjph43";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "databake" = [ "dep:databake" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "serde" "zerovec" ];
      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.6.0";
        edition = "2018";
        sha256 = "0l6bl2h62a5m44jdnpn7lmj14rd44via8180i7121fvm73mmrk47";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "tinyvec_macros" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "real_blackbox" = [ "criterion/real_blackbox" ];
          "rustc_1_55" = [ "rustc_1_40" ];
          "rustc_1_57" = [ "rustc_1_55" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "tinyvec_macros" = [ "dep:tinyvec_macros" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "tinyvec_macros" ];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];

      };
      "toml 0.7.8" = rec {
        crateName = "toml";
        version = "0.7.8";
        edition = "2021";
        sha256 = "0mr2dpmzw4ndvzpnnli2dprcx61pdk62fq4mzw0b6zb27ffycyfx";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
            features = [ "serde" ];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.19.15";
            optional = true;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_edit" ];
          "indexmap" = [ "dep:indexmap" ];
          "parse" = [ "dep:toml_edit" ];
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" "display" "parse" ];
      };
      "toml 0.8.6" = rec {
        crateName = "toml";
        version = "0.8.6";
        edition = "2021";
        sha256 = "1k3ja27m4kdafvgkgfl4kiw4xp8vihikgbgr6yd2rvi7rsmy7ycg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
            features = [ "serde" ];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.20.7";
            optional = true;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_edit" ];
          "indexmap" = [ "dep:indexmap" ];
          "parse" = [ "dep:toml_edit" ];
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "display" "parse" ];
      };
      "toml_datetime" = rec {
        crateName = "toml_datetime";
        version = "0.6.5";
        edition = "2021";
        sha256 = "1wds4pm2cn6agd38f0ivm65xnc7c7bmk9m0fllcaq82nd3lz8l1m";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "toml_edit 0.19.15" = rec {
        crateName = "toml_edit";
        version = "0.19.15";
        edition = "2021";
        sha256 = "08bl7rp5g6jwmfpad9s8jpw8wjrciadpnbaswgywpr9hv9qbfnqv";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.0.2";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow";
          }
        ];
        features = {
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" ];
      };
      "toml_edit 0.20.7" = rec {
        crateName = "toml_edit";
        version = "0.20.7";
        edition = "2021";
        sha256 = "10bdyrl1yj5jxkiqfa2fyx9inlzlm7s8nf1jnysp4k6qwky2gx3h";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.0.2";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow";
          }
        ];
        features = {
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" ];
      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.40";
        edition = "2018";
        sha256 = "1vv48dac9zgj9650pg2b4d0j3w6f3x9gbggf43scq5hrlysklln3";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing-attributes";
            packageId = "tracing-attributes";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "attributes" = [ "tracing-attributes" ];
          "default" = [ "std" "attributes" ];
          "log" = [ "dep:log" ];
          "log-always" = [ "log" ];
          "std" = [ "tracing-core/std" ];
          "tracing-attributes" = [ "dep:tracing-attributes" ];
          "valuable" = [ "tracing-core/valuable" ];
        };
        resolvedDefaultFeatures = [ "attributes" "default" "std" "tracing-attributes" ];
      };
      "tracing-attributes" = rec {
        crateName = "tracing-attributes";
        version = "0.1.27";
        edition = "2018";
        sha256 = "1rvb5dn9z6d0xdj14r403z0af0bbaqhg02hq4jc97g5wds6lqw1l";
        procMacro = true;
        authors = [
          "Tokio Contributors <team@tokio.rs>"
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <dbarsky@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "visit-mut" "clone-impls" "extra-traits" "proc-macro" ];
          }
        ];
        features = {
        };
      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.32";
        edition = "2018";
        sha256 = "0m5aglin3cdwxpvbg6kz0r9r0k31j48n0kcfwsp6l49z26k3svf0";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "valuable";
            packageId = "valuable";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."tracing_unstable" or false);
          }
        ];
        features = {
          "default" = [ "std" "valuable/std" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "once_cell" ];
          "valuable" = [ "dep:valuable" ];
        };
        resolvedDefaultFeatures = [ "default" "once_cell" "std" "valuable" ];
      };
      "tracing-log" = rec {
        crateName = "tracing-log";
        version = "0.1.4";
        edition = "2018";
        sha256 = "1wmxawaz94sk52i4vs2wg5d5clyks972rqskrvc93rxl14ki2lgp";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "default" = [ "log-tracer" "trace-logger" "std" ];
          "env_logger" = [ "dep:env_logger" ];
          "interest-cache" = [ "lru" "ahash" ];
          "lru" = [ "dep:lru" ];
          "std" = [ "log/std" ];
        };
        resolvedDefaultFeatures = [ "log-tracer" "std" ];
      };
      "tracing-subscriber" = rec {
        crateName = "tracing-subscriber";
        version = "0.3.17";
        edition = "2018";
        sha256 = "0xvwfpmb943hdy4gzyn7a2azgigf30mfd1kx10gyh5gr6yy539ih";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <me@davidbarsky.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "matchers";
            packageId = "matchers";
            optional = true;
          }
          {
            name = "nu-ansi-term";
            packageId = "nu-ansi-term";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "unicode-case" "unicode-perl" ];
          }
          {
            name = "sharded-slab";
            packageId = "sharded-slab";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "log-tracer" "std" ];
          }
        ];
        devDependencies = [
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
        ];
        features = {
          "ansi" = [ "fmt" "nu-ansi-term" ];
          "default" = [ "smallvec" "fmt" "ansi" "tracing-log" "std" ];
          "env-filter" = [ "matchers" "regex" "once_cell" "tracing" "std" "thread_local" ];
          "fmt" = [ "registry" "std" ];
          "json" = [ "tracing-serde" "serde" "serde_json" ];
          "local-time" = [ "time/local-offset" ];
          "matchers" = [ "dep:matchers" ];
          "nu-ansi-term" = [ "dep:nu-ansi-term" ];
          "once_cell" = [ "dep:once_cell" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "regex" = [ "dep:regex" ];
          "registry" = [ "sharded-slab" "thread_local" "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "sharded-slab" = [ "dep:sharded-slab" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "alloc" "tracing-core/std" ];
          "thread_local" = [ "dep:thread_local" ];
          "time" = [ "dep:time" ];
          "tracing" = [ "dep:tracing" ];
          "tracing-log" = [ "dep:tracing-log" ];
          "tracing-serde" = [ "dep:tracing-serde" ];
          "valuable" = [ "tracing-core/valuable" "valuable_crate" "valuable-serde" "tracing-serde/valuable" ];
          "valuable-serde" = [ "dep:valuable-serde" ];
          "valuable_crate" = [ "dep:valuable_crate" ];
        };
        resolvedDefaultFeatures = [ "alloc" "ansi" "default" "env-filter" "fmt" "matchers" "nu-ansi-term" "once_cell" "regex" "registry" "sharded-slab" "smallvec" "std" "thread_local" "tracing" "tracing-log" ];
      };
      "ttf-parser" = rec {
        crateName = "ttf-parser";
        version = "0.20.0";
        edition = "2018";
        sha256 = "1d4n3p9ccjvy4mj72700i0c2q6d49dxjpwflw47q79rpv1v7vxqp";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        features = {
          "default" = [ "std" "opentype-layout" "apple-layout" "variable-fonts" "glyph-names" ];
          "gvar-alloc" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "apple-layout" "default" "glyph-names" "opentype-layout" "std" "variable-fonts" ];
      };
      "two-face" = rec {
        crateName = "two-face";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1ssydfj3cdjf28pmy84wjhayp5s66xnr0b57zgpcfn94bc9x5gip";
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "syntect";
            packageId = "syntect";
            usesDefaultFeatures = false;
            features = [ "dump-load" "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "syntect";
            packageId = "syntect";
            usesDefaultFeatures = false;
            features = [ "html" ];
          }
        ];
        features = {
          "default" = [ "syntect-onig" ];
          "syntect-fancy" = [ "syntect/regex-fancy" ];
          "syntect-onig" = [ "syntect/regex-onig" ];
          "unstable" = [ "syntect/default-syntaxes" ];
        };
        resolvedDefaultFeatures = [ "syntect-fancy" ];
      };
      "typed-arena" = rec {
        crateName = "typed-arena";
        version = "2.0.2";
        edition = "2015";
        sha256 = "0shj0jpmglhgw2f1i4b33ycdzwd1z205pbs1rd5wx7ks2qhaxxka";
        libName = "typed_arena";
        authors = [
          "The typed-arena developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "typst" = rec {
        crateName = "typst";
        version = "0.11.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/typst/typst.git";
          rev = "5011510270c2c23f0ab019af486b26db0d62261b";
          sha256 = "09gnmr8qp4v9kx7zl5r2dwzpdra68hb7n7pq2fnr89819xaj7a0m";
        };
        authors = [
          "The Typst Project Developers"
        ];
        dependencies = [
          {
            name = "az";
            packageId = "az";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.4.1";
            features = [ "serde" ];
          }
          {
            name = "chinese-number";
            packageId = "chinese-number";
            usesDefaultFeatures = false;
            features = [ "number-to-chinese" ];
          }
          {
            name = "ciborium";
            packageId = "ciborium";
          }
          {
            name = "comemo";
            packageId = "comemo";
          }
          {
            name = "csv";
            packageId = "csv";
          }
          {
            name = "ecow";
            packageId = "ecow";
            features = [ "serde" ];
          }
          {
            name = "fontdb";
            packageId = "fontdb";
            usesDefaultFeatures = false;
          }
          {
            name = "hayagriva";
            packageId = "hayagriva";
          }
          {
            name = "hypher";
            packageId = "hypher";
          }
          {
            name = "icu_properties";
            packageId = "icu_properties";
            features = [ "serde" ];
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            features = [ "sync" ];
          }
          {
            name = "icu_provider_adapters";
            packageId = "icu_provider_adapters";
          }
          {
            name = "icu_provider_blob";
            packageId = "icu_provider_blob";
          }
          {
            name = "icu_segmenter";
            packageId = "icu_segmenter";
            features = [ "serde" ];
          }
          {
            name = "if_chain";
            packageId = "if_chain";
          }
          {
            name = "image";
            packageId = "image";
            usesDefaultFeatures = false;
            features = [ "png" "jpeg" "gif" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.0.2";
            features = [ "serde" ];
          }
          {
            name = "kamadak-exif";
            packageId = "kamadak-exif";
          }
          {
            name = "kurbo";
            packageId = "kurbo";
          }
          {
            name = "lipsum";
            packageId = "lipsum";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "palette";
            packageId = "palette";
            usesDefaultFeatures = false;
            features = [ "approx" "libm" ];
          }
          {
            name = "phf";
            packageId = "phf";
            features = [ "macros" ];
          }
          {
            name = "png";
            packageId = "png";
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
          }
          {
            name = "qcms";
            packageId = "qcms";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "roxmltree";
            packageId = "roxmltree";
          }
          {
            name = "rustybuzz";
            packageId = "rustybuzz";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "siphasher";
            packageId = "siphasher 1.0.1";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "union" "const_generics" "const_new" ];
          }
          {
            name = "stacker";
            packageId = "stacker";
            target = { target, features }: (!("wasm32" == target."arch"));
          }
          {
            name = "syntect";
            packageId = "syntect";
            usesDefaultFeatures = false;
            features = [ "parsing" "regex-fancy" "plist-load" "yaml-load" ];
          }
          {
            name = "time";
            packageId = "time";
            features = [ "formatting" "macros" "parsing" ];
          }
          {
            name = "toml";
            packageId = "toml 0.8.6";
            usesDefaultFeatures = false;
            features = [ "parse" "display" ];
          }
          {
            name = "ttf-parser";
            packageId = "ttf-parser";
          }
          {
            name = "two-face";
            packageId = "two-face";
            usesDefaultFeatures = false;
            features = [ "syntect-fancy" ];
          }
          {
            name = "typed-arena";
            packageId = "typed-arena";
          }
          {
            name = "typst-assets";
            packageId = "typst-assets";
          }
          {
            name = "typst-macros";
            packageId = "typst-macros";
          }
          {
            name = "typst-syntax";
            packageId = "typst-syntax";
          }
          {
            name = "typst-timing";
            packageId = "typst-timing";
          }
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
          }
          {
            name = "unicode-math-class";
            packageId = "unicode-math-class";
          }
          {
            name = "unicode-script";
            packageId = "unicode-script";
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
          {
            name = "usvg";
            packageId = "usvg";
            usesDefaultFeatures = false;
            features = [ "text" ];
          }
          {
            name = "wasmi";
            packageId = "wasmi";
          }
        ];

      };
      "typst-assets" = rec {
        crateName = "typst-assets";
        version = "0.11.1";
        edition = "2021";
        sha256 = "172dxzw8nvps72p9mi43568v8p25812v56hw933yxs38sbw62c1b";
        authors = [
          "The Typst Project Developers"
        ];
        features = {
        };
      };
      "typst-macros" = rec {
        crateName = "typst-macros";
        version = "0.11.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/typst/typst.git";
          rev = "5011510270c2c23f0ab019af486b26db0d62261b";
          sha256 = "09gnmr8qp4v9kx7zl5r2dwzpdra68hb7n7pq2fnr89819xaj7a0m";
        };
        procMacro = true;
        authors = [
          "The Typst Project Developers"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" "extra-traits" ];
          }
        ];

      };
      "typst-syntax" = rec {
        crateName = "typst-syntax";
        version = "0.11.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/typst/typst.git";
          rev = "5011510270c2c23f0ab019af486b26db0d62261b";
          sha256 = "09gnmr8qp4v9kx7zl5r2dwzpdra68hb7n7pq2fnr89819xaj7a0m";
        };
        authors = [
          "The Typst Project Developers"
        ];
        dependencies = [
          {
            name = "comemo";
            packageId = "comemo";
          }
          {
            name = "ecow";
            packageId = "ecow";
            features = [ "serde" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
          {
            name = "unicode-math-class";
            packageId = "unicode-math-class";
          }
          {
            name = "unicode-script";
            packageId = "unicode-script";
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
          {
            name = "unscanny";
            packageId = "unscanny";
          }
        ];

      };
      "typst-timing" = rec {
        crateName = "typst-timing";
        version = "0.11.1";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/typst/typst.git";
          rev = "5011510270c2c23f0ab019af486b26db0d62261b";
          sha256 = "09gnmr8qp4v9kx7zl5r2dwzpdra68hb7n7pq2fnr89819xaj7a0m";
        };
        authors = [
          "The Typst Project Developers"
        ];
        dependencies = [
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "typst-syntax";
            packageId = "typst-syntax";
          }
        ];

      };
      "typstfmt" = rec {
        crateName = "typstfmt";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          {
            name = "typstfmt";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./.; }
          else ./.;
        authors = [
          "Andrew Jeffery <dev@jeffas.io>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "globmatch";
            packageId = "globmatch";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "similar";
            packageId = "similar";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "toml";
            packageId = "toml 0.7.8";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "env-filter" ];
          }
          {
            name = "typst";
            packageId = "typst";
          }
        ];
        devDependencies = [
          {
            name = "env_logger";
            packageId = "env_logger";
          }
          {
            name = "similar-asserts";
            packageId = "similar-asserts";
          }
        ];

      };
      "unic-langid" = rec {
        crateName = "unic-langid";
        version = "0.9.5";
        edition = "2021";
        sha256 = "0i2s024frmpfa68lzy8y8vnb1rz3m9v0ga13f7h2afx7f8g9vp93";
        libName = "unic_langid";
        authors = [
          "Zibi Braniecki <gandalf@mozilla.com>"
        ];
        dependencies = [
          {
            name = "unic-langid-impl";
            packageId = "unic-langid-impl";
          }
        ];
        features = {
          "likelysubtags" = [ "unic-langid-impl/likelysubtags" ];
          "macros" = [ "unic-langid-macros" ];
          "serde" = [ "unic-langid-impl/serde" ];
          "unic-langid-macros" = [ "dep:unic-langid-macros" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" ];
      };
      "unic-langid-impl" = rec {
        crateName = "unic-langid-impl";
        version = "0.9.5";
        edition = "2021";
        crateBin = [];
        sha256 = "1rckyn5wqd5h8jxhbzlbbagr459zkzg822r4k5n30jaryv0j4m0a";
        libName = "unic_langid_impl";
        authors = [
          "Zibi Braniecki <gandalf@mozilla.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "tinystr";
            packageId = "tinystr";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "binary" = [ "serde" "serde_json" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.13";
        edition = "2018";
        sha256 = "0q0l7rdkiq54pan7a4ama39dgynaf1mnjj1nddrq1w1zayjqp24j";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "std" "hardcoded-data" ];
          "flame" = [ "dep:flame" ];
          "flame_it" = [ "flame" "flamer" ];
          "flamer" = [ "dep:flamer" ];
          "serde" = [ "dep:serde" ];
          "with_serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "hardcoded-data" "std" ];
      };
      "unicode-bidi-mirroring" = rec {
        crateName = "unicode-bidi-mirroring";
        version = "0.1.0";
        edition = "2018";
        sha256 = "150navn2n6barkzchv96n877i17m1754nzmy1282zmcjzdh25lan";
        authors = [
          "Evgeniy Reizner <razrfalcon@gmail.com>"
        ];

      };
      "unicode-ccc" = rec {
        crateName = "unicode-ccc";
        version = "0.1.2";
        edition = "2018";
        sha256 = "1wbwny92wzmck2cix5h3r97h9z57x9831kadrs6jdy24lvpj09fc";
        authors = [
          "Evgeniy Reizner <razrfalcon@gmail.com>"
        ];

      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.12";
        edition = "2018";
        sha256 = "0jzf1znfpb2gx8nr8mvmyqs1crnv79l57nxnbiszc7xf7ynbjm1k";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unicode-math-class" = rec {
        crateName = "unicode-math-class";
        version = "0.1.0";
        edition = "2021";
        sha256 = "0rbxcjirldpdrpxv1l7qiadbib8rnl7b413fsp4f7ynmk7snq93x";
        authors = [
          "Laurenz <laurmaedje@gmail.com>"
        ];

      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.23";
        edition = "2018";
        sha256 = "1x81a50h2zxigj74b9bqjsirxxbyhmis54kg600xj213vf31cvd5";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "unicode-properties" = rec {
        crateName = "unicode-properties";
        version = "0.1.0";
        edition = "2021";
        sha256 = "1w12zpvpabl37sq9nsbnp76r9z7lg0f81l63af4a3fpv465iryf7";
        authors = [
          "Charles Lew <crlf0710@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "default" = [ "general-category" "emoji" ];
        };
        resolvedDefaultFeatures = [ "general-category" ];
      };
      "unicode-script" = rec {
        crateName = "unicode-script";
        version = "0.5.5";
        edition = "2018";
        sha256 = "1k4fgc2lhn5x34w9xp2gqvxxqasds62qc9a7rbadzmmyw5ap50bx";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
          "std" = [ "dep:std" ];
        };
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.10.1";
        edition = "2018";
        sha256 = "0dky2hm5k51xy11hc3nk85p533rvghd462b6i0c532b7hl4j9mhx";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-vo" = rec {
        crateName = "unicode-vo";
        version = "0.1.0";
        edition = "2015";
        sha256 = "151sha088v9jyfvbg5164xh4dk72g53b82xm4zzbf5dlagzqdlxi";
        authors = [
          "Evgeniy Reizner <razrfalcon@gmail.com>"
        ];

      };
      "unsafe-libyaml" = rec {
        crateName = "unsafe-libyaml";
        version = "0.2.11";
        edition = "2021";
        crateBin = [];
        sha256 = "0qdq69ffl3v5pzx9kzxbghzn0fzn266i1xn70y88maybz9csqfk7";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unscanny" = rec {
        crateName = "unscanny";
        version = "0.1.0";
        edition = "2021";
        sha256 = "0ivbipc1rnq15fhzgna41p1h01ncq4shycii72f3x5d7czq2mpz9";
        authors = [
          "Laurenz <laurmaedje@gmail.com>"
        ];

      };
      "url" = rec {
        crateName = "url";
        version = "2.5.0";
        edition = "2018";
        sha256 = "0cs65961miawncdg2z20171w0vqrmraswv2ihdpd8lxp7cp31rii";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" ];
      };
      "usvg" = rec {
        crateName = "usvg";
        version = "0.38.0";
        edition = "2021";
        crateBin = [];
        sha256 = "098n1l980dz58fcrlxrsy7k584dc3nmq1an1aj3dwwy1lfs64zrp";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pico-args";
            packageId = "pico-args";
            features = [ "eq-separator" ];
          }
          {
            name = "usvg-parser";
            packageId = "usvg-parser";
          }
          {
            name = "usvg-text-layout";
            packageId = "usvg-text-layout";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "usvg-tree";
            packageId = "usvg-tree";
          }
          {
            name = "xmlwriter";
            packageId = "xmlwriter";
          }
        ];
        features = {
          "default" = [ "text" "system-fonts" "memmap-fonts" ];
          "memmap-fonts" = [ "usvg-text-layout/memmap-fonts" ];
          "system-fonts" = [ "usvg-text-layout/system-fonts" ];
          "text" = [ "usvg-text-layout" ];
          "usvg-text-layout" = [ "dep:usvg-text-layout" ];
        };
        resolvedDefaultFeatures = [ "text" "usvg-text-layout" ];
      };
      "usvg-parser" = rec {
        crateName = "usvg-parser";
        version = "0.38.0";
        edition = "2021";
        sha256 = "1c0lk23aij52hwjx9mrhz7ffyyljld044wvgji76ng82ybk0a6im";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "data-url";
            packageId = "data-url";
          }
          {
            name = "flate2";
            packageId = "flate2";
            usesDefaultFeatures = false;
            features = [ "rust_backend" ];
          }
          {
            name = "imagesize";
            packageId = "imagesize";
          }
          {
            name = "kurbo";
            packageId = "kurbo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "roxmltree";
            packageId = "roxmltree";
          }
          {
            name = "simplecss";
            packageId = "simplecss";
          }
          {
            name = "siphasher";
            packageId = "siphasher 0.3.11";
          }
          {
            name = "svgtypes";
            packageId = "svgtypes";
          }
          {
            name = "usvg-tree";
            packageId = "usvg-tree";
          }
        ];

      };
      "usvg-text-layout" = rec {
        crateName = "usvg-text-layout";
        version = "0.38.0";
        edition = "2021";
        sha256 = "1qj6vgk7244by314j5wgp58k5s5xgc29vbrfhpz33x2wkn5qhhcc";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "fontdb";
            packageId = "fontdb";
            usesDefaultFeatures = false;
          }
          {
            name = "kurbo";
            packageId = "kurbo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rustybuzz";
            packageId = "rustybuzz";
          }
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
          }
          {
            name = "unicode-script";
            packageId = "unicode-script";
          }
          {
            name = "unicode-vo";
            packageId = "unicode-vo";
          }
          {
            name = "usvg-tree";
            packageId = "usvg-tree";
          }
        ];
        features = {
          "default" = [ "system-fonts" "memmap-fonts" ];
          "memmap-fonts" = [ "fontdb/memmap" ];
          "system-fonts" = [ "fontdb/fs" "fontdb/fontconfig" ];
        };
      };
      "usvg-tree" = rec {
        crateName = "usvg-tree";
        version = "0.38.0";
        edition = "2021";
        sha256 = "01czj22qlzdy5p7y6i1j58k4z7yv8q8mnb1narp3s5gd0h23x1hq";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "strict-num";
            packageId = "strict-num";
          }
          {
            name = "svgtypes";
            packageId = "svgtypes";
          }
          {
            name = "tiny-skia-path";
            packageId = "tiny-skia-path";
          }
        ];

      };
      "utf8_iter" = rec {
        crateName = "utf8_iter";
        version = "1.0.4";
        edition = "2021";
        sha256 = "1gmna9flnj8dbyd8ba17zigrp9c4c3zclngf5lnb5yvz1ri41hdn";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];

      };
      "utf8parse" = rec {
        crateName = "utf8parse";
        version = "0.2.1";
        edition = "2018";
        sha256 = "02ip1a0az0qmc2786vxk2nqwsgcwf17d3a38fkf0q7hrmwh9c6vi";
        authors = [
          "Joe Wilm <joe@jwilm.com>"
          "Christian Duerr <contact@christianduerr.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "valuable" = rec {
        crateName = "valuable";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0v9gp3nkjbl30z0fd56d8mx7w1csk86wwjhfjhr400wh9mfpw2w3";
        features = {
          "default" = [ "std" ];
          "derive" = [ "valuable-derive" ];
          "std" = [ "alloc" ];
          "valuable-derive" = [ "dep:valuable-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.4";
        edition = "2015";
        sha256 = "0gs8grwdlgh0xq660d7wr80x14vxbizmd8dbp29p2pdncx8lp1s9";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.4.0";
        edition = "2018";
        sha256 = "1vjl9fmfc4v8k9ald23qrpcbyb8dl1ynyq8d516cm537r1yqa7fp";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "wasmi" = rec {
        crateName = "wasmi";
        version = "0.31.0";
        edition = "2021";
        sha256 = "0ic9x94h140i71f0im27lcb8fyahzkpcns34mva42482h3diwd0z";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Robin Freyler <robin.freyler@gmail.com>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "union" ];
          }
          {
            name = "spin";
            packageId = "spin";
            usesDefaultFeatures = false;
            features = [ "mutex" "spin_mutex" "rwlock" ];
          }
          {
            name = "wasmi_arena";
            packageId = "wasmi_arena";
            usesDefaultFeatures = false;
          }
          {
            name = "wasmi_core";
            packageId = "wasmi_core";
            usesDefaultFeatures = false;
          }
          {
            name = "wasmparser-nostd";
            packageId = "wasmparser-nostd";
            rename = "wasmparser";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "wasmi_core/std" "wasmi_arena/std" "wasmparser/std" "spin/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasmi_arena" = rec {
        crateName = "wasmi_arena";
        version = "0.4.0";
        edition = "2021";
        sha256 = "0s6l4l2q7rwavf2a6ddbfy4ngv6ri5ap8hs8dn2c3yhkwhsiy720";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Robin Freyler <robin.freyler@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "wasmi_core" = rec {
        crateName = "wasmi_core";
        version = "0.13.0";
        edition = "2021";
        sha256 = "0sl5356hb8iz3l297jvd4ml62fhcq0h2f031qa2mpydz6kdsgwfw";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Robin Freyler <robin.freyler@gmail.com>"
        ];
        dependencies = [
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
            usesDefaultFeatures = false;
          }
          {
            name = "libm";
            packageId = "libm";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-traits/std" "downcast-rs/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "wasmparser-nostd" = rec {
        crateName = "wasmparser-nostd";
        version = "0.100.1";
        edition = "2021";
        sha256 = "0907ksqa6n535c258j1hlxpmv7q3g9cancsq73yin8h362wclmwi";
        authors = [
          "Yury Delendik <ydelendik@mozilla.com>"
        ];
        dependencies = [
          {
            name = "indexmap-nostd";
            packageId = "indexmap-nostd";
            rename = "indexmap";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "indexmap/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "weezl" = rec {
        crateName = "weezl";
        version = "0.1.7";
        edition = "2018";
        crateBin = [];
        sha256 = "1frdbq6y5jn2j93i20hc80swpkj30p1wffwxj1nr4fp09m6id4wi";
        authors = [
          "HeroicKatora <andreas.molzer@gmx.de>"
        ];
        features = {
          "async" = [ "futures" "std" ];
          "default" = [ "std" ];
          "futures" = [ "dep:futures" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "consoleapi" "errhandlingapi" "fibersapi" "fileapi" "handleapi" "memoryapi" "minwindef" "processenv" "processthreadsapi" "std" "sysinfoapi" "winbase" "wincon" "winerror" "winnt" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.6";
        edition = "2021";
        sha256 = "15i5lm39wd44004i9d5qspry2cynkrpvwzghr6s2c3dsk28nz7pj";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "sysinfoapi" "winbase" "wincon" "winerror" "winnt" ];
          }
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows-sys 0.45.0" = rec {
        crateName = "windows-sys";
        version = "0.45.0";
        edition = "2018";
        sha256 = "1l36bcqm4g89pknfp8r9rl1w4bn017q6a8qlx8viv0xjxzjkna3m";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.42.2";
            target = { target, features }: (!(target."windows_raw_dylib" or false));
          }
        ];
        features = {
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_UI" "Win32_UI_Input" "Win32_UI_Input_KeyboardAndMouse" "default" ];
      };
      "windows-sys 0.48.0" = rec {
        crateName = "windows-sys";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1aan23v5gs7gya1lc46hqn9mdh8yph3fhxmhxlw36pn6pqc28zb7";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_Threading" "default" ];
      };
      "windows-targets 0.42.2" = rec {
        crateName = "windows-targets";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0wfhnib2fisxlx8c507dbmh97kgij4r6kcxdi0f9nk6l1k080lcf";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-msvc");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-uwp-windows-msvc");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-gnu");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-uwp-windows-gnu");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-msvc");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-uwp-windows-msvc");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnu");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-uwp-windows-gnu");
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-msvc");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-uwp-windows-msvc");
          }
        ];

      };
      "windows-targets 0.48.5" = rec {
        crateName = "windows-targets";
        version = "0.48.5";
        edition = "2018";
        sha256 = "034ljxqshifs1lan89xwpcy1hp0lhdh4b5n0d2z4fwjx2piacbws";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.48.5";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.48.5";
            target = { target, features }: (("aarch64" == target."arch") && ("msvc" == target."env") && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.48.5";
            target = { target, features }: (("x86" == target."arch") && ("gnu" == target."env") && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.48.5";
            target = { target, features }: (("x86" == target."arch") && ("msvc" == target."env") && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.48.5";
            target = { target, features }: (("x86_64" == target."arch") && ("gnu" == target."env") && (!("llvm" == target."abi")) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.48.5";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.48.5";
            target = { target, features }: (("x86_64" == target."arch") && ("msvc" == target."env") && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows-targets 0.52.5" = rec {
        crateName = "windows-targets";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1sz7jrnkygmmlj1ia8fk85wbyil450kq5qkh5qh9sh2rcnj161vg";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.52.5";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.52.5";
            target = { target, features }: (("aarch64" == target."arch") && ("msvc" == target."env") && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.52.5";
            target = { target, features }: (("x86" == target."arch") && ("gnu" == target."env") && (!("llvm" == target."abi")) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.52.5";
            target = { target, features }: (("x86" == target."arch") && ("msvc" == target."env") && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.52.5";
            target = { target, features }: (("x86_64" == target."arch") && ("gnu" == target."env") && (!("llvm" == target."abi")) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.52.5";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.52.5";
            target = { target, features }: ((("x86_64" == target."arch") || ("arm64ec" == target."arch")) && ("msvc" == target."env") && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows_aarch64_gnullvm 0.42.2" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1y4q0qmvl0lvp7syxvfykafvmwal5hrjb4fmv04bqs0bawc52yjr";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.48.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1n05v7qblg1ci3i567inc7xrkmywczxrs1z3lj3rkkxw18py6f1b";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.52.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.5";
        edition = "2021";
        sha256 = "0qrjimbj67nnyn7zqy15mzzmqg0mn5gsr2yciqjxm3cb3vbyx23h";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.42.2" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0hsdikjl5sa1fva5qskpwlxzpc5q9l909fpl1w6yy1hglrj8i3p0";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.48.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1g5l4ry968p73g6bg6jgyvy9lb8fyhcs54067yzxpcpkf44k2dfw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.52.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1dmga8kqlmln2ibckk6mxc9n59vdg8ziqa2zr8awcl720hazv1cr";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.42.2" = rec {
        crateName = "windows_i686_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0kx866dfrby88lqs9v1vgmrkk1z6af9lhaghh5maj7d4imyr47f6";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.48.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0gklnglwd9ilqx7ac3cn8hbhkraqisd0n83jxzf9837nvvkiand7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.52.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.5";
        edition = "2021";
        sha256 = "0w4np3l6qwlra9s2xpflqrs60qk1pz6ahhn91rr74lvdy4y0gfl8";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1s9f4gff0cixd86mw3n63rpmsm4pmr4ffndl6s7qa2h35492dx47";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.42.2" = rec {
        crateName = "windows_i686_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0q0h9m2aq1pygc199pa5jgc952qhcnf0zn688454i7v4xjv41n24";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.48.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "01m4rik437dl9rdf0ndnm2syh10hizvq0dajdkv2fjqcywrw4mcg";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.52.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1gw7fklxywgpnwbwg43alb4hm0qjmx72hqrlwy5nanrxs7rjng6v";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.42.2" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0dnbf2xnp3xrvy8v9mgs3var4zq9v9yh9kv79035rdgyp2w15scd";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.48.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "13kiqqcvz2vnyxzydjh73hwgigsdr2z1xpzx313kxll34nyhmm2k";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.52.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1n8p2mcf3lw6300k77a0knksssmgwb9hynl793mhkzyydgvlchjf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.42.2" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "18wl9r8qbsl475j39zvawlidp1bsbinliwfymr43fibdld31pm16";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.48.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1k24810wfbgz8k48c2yknqjmiigmql6kk3knmddkv8k8g1v54yqb";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.52.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.5";
        edition = "2021";
        sha256 = "15n56jrh4s5bz66zimavr1rmcaw6wa306myrvmbc6rydhbj9h8l5";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.42.2" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1w5r0q0yzx827d10dpjza2ww0j8iajqhmb54s735hhaj66imvv4s";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.48.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0f4mdp895kkjh9zv8dxvn4pc10xr7839lf5pa9l0193i2pkgr57d";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.52.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1w1bn24ap8dp9i85s8mlg8cim2bl2368bd6qyvm0xzqvzmdpxi5y";
        authors = [
          "Microsoft"
        ];

      };
      "winnow" = rec {
        crateName = "winnow";
        version = "0.5.18";
        edition = "2021";
        sha256 = "0cpslay6g9qdcs269cw8fqcky9pdxjpg1lhg88fj4xrng4w62sqp";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "dep:anstream" "dep:anstyle" "dep:is-terminal" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "writeable" = rec {
        crateName = "writeable";
        version = "0.5.4";
        edition = "2021";
        sha256 = "0kp1p9fbavvrvn3nl9xgps1gvs8f5d2qp8vdgfi0m77gp1jbpmys";
        authors = [
          "The ICU4X Project Developers"
        ];
        features = {
        };
      };
      "xmlwriter" = rec {
        crateName = "xmlwriter";
        version = "0.1.0";
        edition = "2018";
        sha256 = "1fg0ldmkgiis6hnxpi1c9gy7v23y0lpi824bp8yp12fi3r82lypc";
        authors = [
          "Evgeniy Reizner <razrfalcon@gmail.com>"
        ];

      };
      "yaml-rust" = rec {
        crateName = "yaml-rust";
        version = "0.4.5";
        edition = "2018";
        sha256 = "118wbqrr4n6wgk5rjjnlrdlahawlxc1bdsx146mwk8f79in97han";
        authors = [
          "Yuheng Chen <yuhengchen@sensetime.com>"
        ];
        dependencies = [
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
        ];

      };
      "yoke" = rec {
        crateName = "yoke";
        version = "0.7.3";
        edition = "2021";
        sha256 = "1r07zy718h27qjhpk4427imp3wx5z2wf4wf6jivlczr89wp1prv5";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke-derive";
            packageId = "yoke-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "alloc" = [ "stable_deref_trait/alloc" "serde?/alloc" "zerofrom/alloc" ];
          "default" = [ "alloc" "zerofrom" ];
          "derive" = [ "dep:yoke-derive" "zerofrom/derive" ];
          "serde" = [ "dep:serde" ];
          "zerofrom" = [ "dep:zerofrom" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "derive" "serde" "zerofrom" ];
      };
      "yoke-derive" = rec {
        crateName = "yoke-derive";
        version = "0.7.3";
        edition = "2021";
        sha256 = "1f52qcg6vmqh9l1wfa8i32hccmpmpq8ml90w4250jn74rkq3cscy";
        procMacro = true;
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "derive" "fold" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];

      };
      "zerofrom" = rec {
        crateName = "zerofrom";
        version = "0.1.3";
        edition = "2021";
        sha256 = "1dq5dmls0gdlbxgzvh56754k0wq7ch60flbq97g9mcf0qla0hnv5";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "zerofrom-derive";
            packageId = "zerofrom-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "dep:zerofrom-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" ];
      };
      "zerofrom-derive" = rec {
        crateName = "zerofrom-derive";
        version = "0.1.3";
        edition = "2021";
        sha256 = "1hqq5xw5a55623313p2gs9scbn24kqhvgrn2wvr75lvi0i8lg9p6";
        procMacro = true;
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "derive" "fold" "visit" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];

      };
      "zerotrie" = rec {
        crateName = "zerotrie";
        version = "0.1.2";
        edition = "2021";
        sha256 = "182ilnz834gs20sfpfni4dm07k09na55hb69b4qbjkspl0jl2nfh";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "litemap";
            packageId = "litemap";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bench" = [ "litemap" ];
          "databake" = [ "dep:databake" "zerovec?/databake" ];
          "litemap" = [ "dep:litemap" "alloc" ];
          "serde" = [ "dep:serde" "dep:litemap" "alloc" "litemap/serde" "zerovec?/serde" ];
          "yoke" = [ "dep:yoke" ];
          "zerofrom" = [ "dep:zerofrom" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "alloc" "litemap" "serde" "zerovec" ];
      };
      "zerovec" = rec {
        crateName = "zerovec";
        version = "0.10.1";
        edition = "2021";
        sha256 = "1si71vdxv648pjjzifdddrzd46zmvgrg64mwi8mwgd8zx6d47x7g";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "yoke";
            packageId = "yoke";
            optional = true;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec-derive";
            packageId = "zerovec-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "bench" = [ "serde" "databake" ];
          "databake" = [ "dep:databake" ];
          "derive" = [ "dep:zerovec-derive" ];
          "hashmap" = [ "dep:t1ha" ];
          "serde" = [ "dep:serde" ];
          "yoke" = [ "dep:yoke" ];
        };
        resolvedDefaultFeatures = [ "derive" "serde" "yoke" ];
      };
      "zerovec-derive" = rec {
        crateName = "zerovec-derive";
        version = "0.10.1";
        edition = "2021";
        sha256 = "081clqqn1girazr4ma1kplg7xr05989fbw7i1rar12gmrfbmjkkv";
        procMacro = true;
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "derive" "parsing" "extra-traits" ];
          }
        ];

      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
  */
  makeDefaultTarget = platform: {
    unix = platform.isUnix;
    windows = platform.isWindows;
    fuchsia = true;
    test = false;

    /* We are choosing an arbitrary rust version to grab `lib` from,
      which is unfortunate, but `lib` has been version-agnostic the
      whole time so this is good enough for now.
    */
    os = pkgs.rust.lib.toTargetOs platform;
    arch = pkgs.rust.lib.toTargetArch platform;
    family = pkgs.rust.lib.toTargetFamily platform;
    env = "gnu";
    endian =
      if platform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString platform.parsed.cpu.bits;
    vendor = platform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs, testPreRun, testPostRun }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    assert builtins.typeOf testPreRun == "string";
    assert builtins.typeOf testPostRun == "string";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test =
        let
          drv = testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand = pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
        pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
          set -ex

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            ${testCommand}
          done
        '';
    in
    pkgs.runCommand "${crate.name}-linked"
      {
        inherit (crate) outputs crateName;
        passthru = (crate.passthru or { }) // {
          inherit test;
        };
      } ''
      echo tested by ${test}
      ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
    '';

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
      # Any command to run immediatelly before a test is executed.
    , testPreRun ? ""
      # Any command run immediatelly after a test is executed.
    , testPostRun ? ""
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        , testPreRun
        , testPostRun
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs: (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs testPreRun testPostRun;
                }
            else drv;
        in
        derivation
      )
      { inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , makeTarget ? makeDefaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures
          (
            args // {
              inherit rootPackageId;
              target = makeTarget stdenv.hostPlatform // { test = runTests; };
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs:
          let
            self = {
              crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
              target = makeTarget pkgs.stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or [ ]);
            dependencies =
              dependencyDerivations {
                inherit features;
                inherit (self) target;
                buildByPackageId = depPackageId:
                  # proc_macro crates must be compiled for the build architecture
                  if crateConfigs.${depPackageId}.procMacro or false
                  then self.build.crates.${depPackageId}
                  else self.crates.${depPackageId};
                dependencies =
                  (crateConfig.dependencies or [ ])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit features;
                inherit (self.build) target;
                buildByPackageId = depPackageId:
                  self.build.crates.${depPackageId};
                dependencies = crateConfig.buildDependencies or [ ];
              };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped =
                  lib.groupBy
                    (dependency: dependency.name)
                    dependenciesWithRenames;
                versionAndRename = dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  { inherit (dep) rename; version = package.version; };
              in
              lib.mapAttrs (name: choices: builtins.map versionAndRename choices) grouped;
          in
          buildRustCrateForPkgsFunc pkgs
            (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 =
                      assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
                extraRustcOpts = lib.lists.optional (targetFeatures != [ ]) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
      builtByPackageIdByPkgs;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? makeDefaultTarget stdenv.hostPlatform }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateForPkgsFunc = _: lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson
          (
            buildRustCrateWithFeatures {
              buildRustCrateForPkgsFunc = _: crate: {
                "01_crateName" = crate.crateName or false;
                "02_features" = crate.features or [ ];
                "03_dependencies" = crate.dependencies or [ ];
              };
              inherit packageId;
            }
          );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
    { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /* Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          { inherit packageId features; };
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache
            (
              cache: { packageId, features }:
                let
                  cacheFeatures = cache.${packageId} or [ ];
                  combinedFeatures = sortedUnique (cacheFeatures ++ features);
                in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
            (
              crateConfig.dependencies or [ ]
              ++ lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig.devDependencies or [ ])
            );
        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or [ ]);
      in
      cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (
          !(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features
        )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = dependency: feature:
    let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    feature == name || feature == "dep:" + name || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or [ ]));
      outFeatures = lib.concatMap expandFeature inputFeatures;
    in
    sortedUnique outFeatures;

  /* This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
  */
  enableFeatures = dependencies: features:
    assert (builtins.isList features);
    assert (builtins.isList dependencies);
    let
      additionalFeatures = lib.concatMap
        (
          dependency:
            assert (builtins.isAttrs dependency);
            let
              enabled = builtins.any (doesFeatureEnableDependency dependency) features;
            in
            if (dependency.optional or false) && enabled
            then [ (dependency.rename or dependency.name) ]
            else [ ]
        )
        dependencies;
    in
    sortedUnique (features ++ additionalFeatures);

  /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil =
        if dependency.usesDefaultFeatures or true
        then [ "default" ]
        else [ ];
      explicitFeatures = dependency.features or [ ];
      additionalDependencyFeatures =
        let
          name = dependency.rename or dependency.name;
          stripPrefixMatch = prefix: s:
            if lib.hasPrefix prefix s
            then lib.removePrefix prefix s
            else null;
          extractFeature = feature: lib.findFirst
            (f: f != null)
            null
            (map (prefix: stripPrefixMatch prefix feature) [
              (name + "/")
              (name + "?/")
            ]);
          dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
        in
        dependencyFeatures;
    in
    defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
    builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #
  };
}

